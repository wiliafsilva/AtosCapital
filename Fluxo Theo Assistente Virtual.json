{
  "name": "Responder com IA",
  "nodes": [
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT numero FROM usuarios;",
        "options": {}
      },
      "type": "n8n-nodes-base.mySql",
      "typeVersion": 2.4,
      "position": [
        -3220,
        1720
      ],
      "id": "add1b79c-f13c-407d-9bb3-b674782903a3",
      "name": "Puxar Numeros",
      "credentials": {
        "mySql": {
          "id": "S6qEZzd9OoEbJ7Bt",
          "name": "Atos Capital"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "resource": "messages-api",
        "instanceName": "atoscapital",
        "remoteJid": "={{$json[\"numero\"]}}",
        "messageText": "Você não tem permissão para fazer perguntas",
        "options_message": {}
      },
      "type": "n8n-nodes-evolution-api.evolutionApi",
      "typeVersion": 1,
      "position": [
        -2620,
        1760
      ],
      "id": "1345b640-b0c4-451a-b484-bd2ba8d6adb0",
      "name": "Enviar Não Possui Autorização",
      "credentials": {
        "evolutionApi": {
          "id": "19NxyORpzpOmLGmT",
          "name": "Evolution API"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "// Obter todos os números do banco de dados\nconst numerosDoBanco = $input.all().map(item => item.json.numero);\n\n// Extrair e formatar o número do WhatsApp\nconst numeroCompleto = $node[\"Salvar Numero e Pergunta\"].json[\"numero\"];\n\n// Remove o sufixo '@s.whatsapp.net' se existir e extrai apenas o número\nconst numeroAtual = numeroCompleto.includes('@') ? numeroCompleto.split('@')[0] : numeroCompleto;\n\n// Adicionar o 9 após o código do país e DDD (primeiros 4 dígitos) apenas para verificação\nconst numeroParaVerificacao = numeroAtual.length > 4 \n    ? numeroAtual.slice(0, 4) + '9' + numeroAtual.slice(4)\n    : numeroAtual;\n\n// Verificar se o número modificado está na lista\nconst autorizado = numerosDoBanco.includes(numeroParaVerificacao);\n\nreturn [\n  {\n    json: {\n      numero: numeroAtual, // Mantém o número original sem o 9 adicional\n      pergunta: $node[\"Salvar Numero e Pergunta\"].json[\"pergunta\"],\n      autorizado: autorizado\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -3020,
        1720
      ],
      "id": "093d1a33-faaa-472a-b04a-eda078826db5",
      "name": "Numeros Autorizados"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "cb1702d8-fb7d-4504-b976-515f19999f20",
              "name": "pergunta",
              "value": "={{ $('Filtrar mensagens do usuário').item.json.body.data.message.conversation }}",
              "type": "string"
            },
            {
              "id": "a7423f66-bec7-4838-b60c-6ddc2c30bcb5",
              "name": "numero",
              "value": "={{ $('Filtrar mensagens do usuário').item.json.body.data.key.remoteJid }}",
              "type": "string"
            },
            {
              "id": "38aeb453-b193-49ed-95a8-316b12611eb9",
              "name": "dia atual",
              "value": "={{ $now }}",
              "type": "string"
            },
            {
              "id": "4b514d29-b91e-4845-aff0-7a357d93bd69",
              "name": "",
              "value": "",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -3400,
        1720
      ],
      "id": "f33c71a3-ae46-4cfc-a3b2-a5f63efba146",
      "name": "Salvar Numero e Pergunta"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "b92aae35-cfd8-4661-bbc7-55fff9c56d21",
              "leftValue": "={{$json[\"autorizado\"]}}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -2820,
        1720
      ],
      "id": "096f543c-70a2-430e-8a5f-d12716c94f13",
      "name": "If"
    },
    {
      "parameters": {
        "language": "javascript",
        "jsCode": "const mensagem = $json?.key?.fromMe || $json?.body?.data?.key?.fromMe;\nreturn mensagem === false ? [{ json: $json }] : [];"
      },
      "id": "763ada29-67dd-4007-935d-a3317bc4cc4f",
      "name": "Filtrar mensagens do usuário",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        -3940,
        1860
      ]
    },
    {
      "parameters": {
        "resource": "messages-api",
        "instanceName": "atoscapital",
        "remoteJid": "={{ $('If').item.json.numero }}\n",
        "messageText": "=Sua pergunta será processada e em breve você receberá a resposta",
        "options_message": {
          "delay": 300
        }
      },
      "type": "n8n-nodes-evolution-api.evolutionApi",
      "typeVersion": 1,
      "position": [
        -2160,
        1520
      ],
      "id": "1feba542-0c4f-4b4d-8c6c-cfad44b6a155",
      "name": "Enviar Pergunta Será Processada",
      "credentials": {
        "evolutionApi": {
          "id": "19NxyORpzpOmLGmT",
          "name": "Evolution API"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "operation": "toBinary",
        "sourceProperty": "base64",
        "options": {
          "fileName": "audio.mp3",
          "mimeType": "audio/mpeg"
        }
      },
      "type": "n8n-nodes-base.convertToFile",
      "typeVersion": 1.1,
      "position": [
        -3400,
        2020
      ],
      "id": "968760b6-adc9-4730-85e9-16064ac833a4",
      "name": "Convert to File"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "/pergunta-whatsapp",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -4540,
        2020
      ],
      "id": "c74d7682-5f99-4258-aa52-35bedd293b59",
      "name": "Pegar Mensagem",
      "webhookId": "ca3d474a-0f20-4427-b527-1c0e1eb708e7"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT numero FROM usuarios;",
        "options": {}
      },
      "type": "n8n-nodes-base.mySql",
      "typeVersion": 2.4,
      "position": [
        -2820,
        2020
      ],
      "id": "ce28d694-14a5-483a-bfb7-c97a5b07046a",
      "name": "Puxar Numeros1",
      "credentials": {
        "mySql": {
          "id": "S6qEZzd9OoEbJ7Bt",
          "name": "Atos Capital"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "// Obter todos os números do banco de dados\nconst numerosDoBanco = $input.all().map(item => item.json.numero);\n\n// Extrair e formatar o número do WhatsApp\nconst numeroCompleto = $node[\"Salvar Numero e Pergunta Audio\"].json[\"numero\"];\n\n// Remove o sufixo '@s.whatsapp.net' se existir e extrai apenas o número\nconst numeroAtual = numeroCompleto.includes('@') ? numeroCompleto.split('@')[0] : numeroCompleto;\n\n// Adicionar o 9 após o código do país e DDD (primeiros 4 dígitos) apenas para verificação\nconst numeroParaVerificacao = numeroAtual.length > 4 \n    ? numeroAtual.slice(0, 4) + '9' + numeroAtual.slice(4)\n    : numeroAtual;\n\n// Verificar se o número modificado está na lista\nconst autorizado = numerosDoBanco.includes(numeroParaVerificacao);\n\nreturn [\n  {\n    json: {\n      numero: numeroAtual, // Mantém o número original sem o 9 adicional\n      pergunta: $node[\"Salvar Numero e Pergunta Audio\"].json[\"pergunta\"],\n      autorizado: autorizado\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2620,
        2020
      ],
      "id": "9335254b-f46e-4ec3-964f-8ef32de9a078",
      "name": "Numeros Autorizados1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "b92aae35-cfd8-4661-bbc7-55fff9c56d21",
              "leftValue": "={{$json[\"autorizado\"]}}",
              "rightValue": true,
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -2420,
        2020
      ],
      "id": "420fa343-3a2e-4a76-afa3-caed04377b46",
      "name": "If1"
    },
    {
      "parameters": {
        "resource": "messages-api",
        "instanceName": "atoscapital",
        "remoteJid": "={{$json[\"numero\"]}}",
        "messageText": "Você não tem permissão para fazer perguntas",
        "options_message": {}
      },
      "type": "n8n-nodes-evolution-api.evolutionApi",
      "typeVersion": 1,
      "position": [
        -2260,
        2180
      ],
      "id": "b28f8bc5-2549-46ce-874d-574d13c75296",
      "name": "Enviar Não Possui Autorização1",
      "credentials": {
        "evolutionApi": {
          "id": "19NxyORpzpOmLGmT",
          "name": "Evolution API"
        }
      }
    },
    {
      "parameters": {
        "resource": "messages-api",
        "instanceName": "atoscapital",
        "remoteJid": "={{ $('If1').item.json.numero }}\n",
        "messageText": "=Sua pergunta será processada e em breve você receberá a resposta",
        "options_message": {
          "delay": 300
        }
      },
      "type": "n8n-nodes-evolution-api.evolutionApi",
      "typeVersion": 1,
      "position": [
        -1720,
        2140
      ],
      "id": "02872c9c-bd7b-49d8-968a-9f79920d22f0",
      "name": "Enviar Pergunta Será Processada1",
      "credentials": {
        "evolutionApi": {
          "id": "19NxyORpzpOmLGmT",
          "name": "Evolution API"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.pergunta ?? $('Transf Pergunta2').item.json.output }}",
        "options": {
          "systemMessage": "=ENVIAR COMO RESPOSTA APENAS O SQL e sem uso de crases, em nomes de filial se atentar aos acentos necessários para o nome Real da cidade A data atual é {{ new Date().toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' }) }}, , Você é uma IA que deve interepretar a pergunta que o usuário está fazendo antes de fazer a consulta no banco, e faça um select personalizado para somente pesquisar o necessário para responder essa pergunta e não consultar o banco de dados completo, antes de gerar o sql veja os exemplos abaixo para se basear, alguns estão pré prontos. Para busca de informações de filial em nmFilial , NÂO UTILIZAR CRASES no SQL. Se eu fizer uma pergunta sobre previsão ou meta e não especificar o mês considere o mês e ano atual de {{ new Date().toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' }) }}, adicionar o nome \"Filial\" antes do nome da filial, minhas colunas do banco são idVendas, nrCNPJ, nmFilial, dtVenda, vlVenda vou enviar alguns exemplos enumerados abaixo:\n\n1. Se receber a palavra Perfeito retorne \"Envie uma pergunta valida\", Se pedir o link do dashboard você deve enviar \"https://atoscapital.streamlit.app/\"\n\n2. Se receber uma pergunta que não tem relação de perguntas com vendas, valores, filiais, metas, previsões você deve retornar \"Não posso responder sobre isso\"\n\n4. Se você receber uma única palavra ou emoji responder \"Envie uma pergunta valida\"\n\n5. Se eu pergunto quantas filiais tenho o sql seria: SELECT COUNT(DISTINCT nmFilial) AS totalFiliais FROM tbVendasDashboard;,\n\n6. Se eu pergunto sobre o acumulado 2024 de uma filial por exemplo qual o acumulado 2024 da filial são paulo o sql seria: SELECT SUM(vlVenda) AS acumulado_vendas_maio_2024 FROM tbVendasDashboard WHERE nmFilial = 'Filial São Paulo' AND YEAR(dtVenda) = 2024 AND MONTH(dtVenda) = 5 AND DAY(dtVenda) IN (SELECT DISTINCT DAY(dtVenda) FROM tbVendasDashboard WHERE nmFilial = 'Filial São Paulo' AND YEAR(dtVenda) = 2025 AND MONTH(dtVenda) = 5 AND vlVenda > 0);\n\n7. Se eu pergunto sobre a previsão de São Paulo em maio de 2025 no sql seria:SELECT CAST((SUM(vlVenda) / COUNT(DISTINCT CAST(dtVenda AS DATE))) * 31 AS DECIMAL(10, 2)) AS previsao_vendas_maio FROM tbVendasDashboard WHERE nmFilial = 'São Paulo' AND YEAR(dtVenda) = 2025 AND MONTH(dtVenda) = 5 AND vlVenda > 0;, \n\n8. Se eu pergunto sobre o acumulado meta da filial Salvador em maio o sql seria: SELECT SUM(vlVenda) * 1.05 AS acumulado_vendas_maio_2024_com_5_porcento FROM tbVendasDashboard WHERE nmFilial = 'Salvador' AND YEAR(dtVenda) = 2024 AND MONTH(dtVenda) = 5 AND DAY(dtVenda) IN (SELECT DISTINCT DAY(dtVenda) FROM tbVendasDashboard WHERE nmFilial = 'Salvador' AND YEAR(dtVenda) = 2025 AND MONTH(dtVenda) = 5 AND vlVenda > 0);\n\n9.Se eu pergunto o acumulado vendas de São Paulo em maio de 2025 o sql seria: SELECT SUM(vlVenda) AS total_vendido_maio_2025 FROM tbVendasDashboard WHERE nmFilial = 'Filial São Paulo' AND YEAR(dtVenda) = 2025 AND MONTH(dtVenda) = 5 AND vlVenda > 0;\n\n10. Se no dia 3-5-25 eu pergunto sobre crescimento meta de maio em São paulo o sql seria: SELECT CAST(ROUND(((SELECT SUM(vlVenda) FROM tbVendasDashboard WHERE nmFilial = 'São Paulo' AND YEAR(dtVenda) = 2025 AND MONTH(dtVenda) = 5 AND vlVenda > 0) / (SELECT SUM(vlVenda) * 1.05 FROM tbVendasDashboard WHERE nmFilial = 'São Paulo' AND YEAR(dtVenda) = 2024 AND MONTH(dtVenda) = 5 AND DAY(dtVenda) IN (SELECT DISTINCT DAY(dtVenda) FROM tbVendasDashboard WHERE nmFilial = 'São Paulo' AND YEAR(dtVenda) = 2025 AND MONTH(dtVenda) = 5 AND vlVenda > 0))) * 100 - 100, 2) AS VARCHAR) + '%' AS resultado_percentual;,\n\n11. Se em 3-5-25 eu pergunto o crescimento de maio de 2025 em São Paulo o sql seria: SELECT CASE WHEN (t2025.total2025 - t2024.total2024) >= 0 THEN '+' + CAST(ROUND(((t2025.total2025 / t2024.total2024) - 1) * 100.0, 2) AS VARCHAR) + '%' ELSE '-' + CAST(ROUND((1 - (t2025.total2025 / t2024.total2024)) * 100.0, 2) AS VARCHAR) + '%' END AS crescimento_percentual FROM (SELECT SUM(vlVenda) AS total2025 FROM tbVendasDashboard WHERE nmFilial = 'São Paulo' AND YEAR(dtVenda) = 2025 AND MONTH(dtVenda) = 5 AND DAY(dtVenda) <= 4 AND vlVenda > 0) AS t2025, (SELECT SUM(vlVenda) AS total2024 FROM tbVendasDashboard WHERE nmFilial = 'São Paulo' AND YEAR(dtVenda) = 2024 AND MONTH(dtVenda) = 5 AND DAY(dtVenda) IN (SELECT DISTINCT DAY(dtVenda) FROM tbVendasDashboard WHERE nmFilial = 'São Paulo' AND YEAR(dtVenda) = 2025 AND MONTH(dtVenda) = 5 AND DAY(dtVenda) <= 4 AND vlVenda > 0)) AS t2024;\n\n12. Se eu pergunto quanto vendi na filial salvador no dia 15 de maio de 2025 o sql seria: SELECT vlVenda FROM tbVendasDashboard WHERE nmFilial = 'Filial Salvador' AND dtVenda = '2025-05-15';,\n\n13. Se eu pergunto quais filiais eu tenho o sql seria: SELECT DISTINCT nmFilial AS nmFilial FROM tbVendasDashboard ORDER BY nmFilial;. \n\n14. Se eu pergunto qual filial minha mais vendeu em janeiro de 2025 o sql seria esse: SELECT TOP 1 nmFilial, SUM(vlVenda) AS total_vendas FROM tbVendasDashboard WHERE YEAR(dtVenda) = 2025 AND MONTH(dtVenda) = 1 GROUP BY nmFilial ORDER BY total_vendas DESC;,\n\n15. Se eu pergunto qual filial minha mais vendeu o sql seria esse: SELECT TOP 1 nmFilial, SUM(vlVenda) AS total_vendas FROM tbVendasDashboard GROUP BY nmFilial ORDER BY total_vendas DESC;, \n\n16. Se a pergunta for Qual a media de vendas dos ultimos 10 dias de fevereiro de 2025 na filial São Paulo o sql seria: SELECT AVG(vlVenda) AS media_vendas FROM tbVendasDashboard WHERE nmFilial = 'Filial São Paulo' AND dtVenda BETWEEN '2025-02-19' AND '2025-02-28';\n\n17. Se eu pergunto Qual minha filial mais vendeu no mês de abril de 2024 e no mês de abril de 2025 o sql seria: SELECT anoMes, nmFilial, total_vendas FROM (SELECT YEAR(dtVenda)*100 + MONTH(dtVenda) AS anoMes, nmFilial, SUM(vlVenda) AS total_vendas, RANK() OVER (PARTITION BY YEAR(dtVenda)*100 + MONTH(dtVenda) ORDER BY SUM(vlVenda) DESC) AS rk FROM tbVendasDashboard WHERE (YEAR(dtVenda) = 2024 AND MONTH(dtVenda) = 4) OR (YEAR(dtVenda) = 2025 AND MONTH(dtVenda) = 4) GROUP BY YEAR(dtVenda)*100 + MONTH(dtVenda), nmFilial) AS t WHERE rk = 1;\n\n18. Se eu pergunto qual a meta de vendas da filial salvador em maio de 2025 o sql seria: SELECT SUM(vlVenda) * 1.05 AS metaMaio2025 FROM tbVendasDashboard WHERE nmFilial = 'Salvador' AND MONTH(dtVenda) = 5 AND YEAR(dtVenda) = 2024;\n\n19. Se eu pergunto Quais filiais bateram a meta em abril de 2025 o sql seria: SELECT v2025.nmFilial FROM (SELECT nmFilial, SUM(vlVenda) AS vendas2025 FROM tbVendasDashboard WHERE MONTH(dtVenda) = 4 AND YEAR(dtVenda) = 2025 GROUP BY nmFilial) v2025 INNER JOIN (SELECT nmFilial, SUM(vlVenda) * 1.05 AS meta2025 FROM tbVendasDashboard WHERE MONTH(dtVenda) = 4 AND YEAR(dtVenda) = 2024 GROUP BY nmFilial) m2025 ON v2025.nmFilial = m2025.nmFilial WHERE v2025.vendas2025 >= m2025.meta2025;,\n\n20. Se eu pergunto quanto eu vendi na filial são paulo em abril de 2025 o sql seria: SELECT SUM(vlVenda) AS vendasAbril2025 FROM tbVendasDashboard WHERE nmFilial = 'São Paulo' AND YEAR(dtVenda) = 2025 AND MONTH(dtVenda) = 4;,\n\n21. Se eu pergunto a previsão de um mês que ja passou por exemplo eu estou em maio de 2025 e pergunto a meta de março de 2025 o sql seria: SELECT SUM(vlVenda) AS previsao_vendas FROM tbVendasDashboard WHERE nmFilial = 'nome_filial' AND YEAR(dtVenda) = 2025 AND MONTH(dtVenda) = 3;,\n\n22. Se eu pergunto qual a maior venda da filial São Paulo o sql seria esse: SELECT MAX(vlVenda) AS maior_venda FROM tbVendasDashboard WHERE nmFilial = 'Filial São Paulo';,\n\n23. Se eu pergunto qual a ultima venda de Belém o sql seria: SELECT TOP 1 dtVenda, vlVenda FROM tbVendasDashboard WHERE nmFilial = 'Belém' AND vlVenda IS NOT NULL ORDER BY dtVenda DESC;\n\n24. Se eu pergunto Quero valor das últimas venda de todas as filiais o sql seria: SELECT nmFilial, dtVenda, vlVenda FROM tbVendasDashboard t1 WHERE dtVenda = (SELECT MAX(dtVenda) FROM tbVendasDashboard t2 WHERE t2.nmFilial = t1.nmFilial AND vlVenda IS NOT NULL) AND vlVenda IS NOT NULL ORDER BY nmFilial;\n\n25. Se eu pergunto o total do Rio de Janeiro esse ano o sql seria: \"SELECT SUM(vlVenda) AS total_vendido_ano_2025 FROM tbVendasDashboard WHERE nmFilial = 'Filial Rio de Janeiro' AND YEAR(dtVenda) = 2025 AND dtVenda <= (SELECT MAX(dtVenda) FROM tbVendasDashboard WHERE YEAR(dtVenda) = 2025 AND nmFilial = 'Filial Rio de Janeiro');\"\n\n26 Se eu pergunto se São Paulo já teve vendas em junho o sql seria: SELECT dtVenda, vlVenda FROM tbVendasDashboard WHERE nmFilial = 'São Paulo' AND MONTH(dtVenda) = 6 AND YEAR(dtVenda) = 2025 AND dtVenda <= CONVERT(DATE, GETDATE()) AND vlVenda IS NOT NULL;\n\n27. Se eu pergunto Qual minha ultima venda de cada filial o sql seria: SELECT nmFilial, dtVenda, vlVenda FROM tbVendasDashboard t1 WHERE dtVenda = (SELECT MAX(dtVenda) FROM tbVendasDashboard t2 WHERE t2.nmFilial = t1.nmFilial AND vlVenda IS NOT NULL) AND vlVenda IS NOT NULL ORDER BY nmFilial ASC;\n\n28. Se eu pergunto Qual a maior venda de cada filial o sql seria: SELECT nmFilial, dtVenda, vlVenda FROM tbVendasDashboard t1 WHERE vlVenda = (SELECT MAX(vlVenda) FROM tbVendasDashboard t2 WHERE t2.nmFilial = t1.nmFilial AND vlVenda IS NOT NULL) AND vlVenda IS NOT NULL ORDER BY nmFilial ASC;\n\n\n29. O dia atual é {{ new Date().toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' }) }}\n\n\nResponder somente com o sql correto lembrando que eu uso SQL SERVER anterior a 2012, sem aspas crases ou chaves\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        140,
        3020
      ],
      "id": "d750f9d8-748a-49c5-b052-d3a7fa104556",
      "name": "Transformar em SQL1"
    },
    {
      "parameters": {
        "model": "meta-llama/llama-4-maverick-17b-128e-instruct",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        160,
        3200
      ],
      "id": "1a410078-4204-4628-aeb5-2bf272fc24d8",
      "name": "Groq Chat Model2",
      "credentials": {
        "groqApi": {
          "id": "RXND1Dx3PYmWh1eD",
          "name": "GROQ"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.output }}",
        "options": {
          "systemMessage": "=Siga todas as regras abaixo enumeradas:\n\n1. Seja o mais rápido possivel\n2. A data de hoje é {{ new Date().toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' }) }}, \n3. Se a pergunta for sobre o link do dashboard e vinher \"https://atoscapital.streamlit.app/\" você não deve fazer nenhuma consulta no banco de dados, deve apenas enviar esse link\n4. Você deve pegar o sql que vem do nó Transformar em SQL e executar no banco e enviar somente a resposta do banco de dados sem enviar nada de código sql enviar somente a resposta mesmo e não enviar nenhum nome de coluna do banco de dados, responder sempre em Pt-Br,\n5. datas responder no padrão brasileiro, e quando preciso usar moedas usar o real brasileiro com \".\" para separar os milhares e \",\" para os decimais \n6. Se a mensagem que você recebeu for uma palavra \"Envie uma pergunta valida\",\n7. Se receber a palavra Perfeito retorne \"Envie uma pergunta valida\" \n8. Se no banco não tiver a resposta responder \"Não possuo conhecimento sobre isso\", \n9. Se der erro na banco responda \"Tive um erro no processamento, faça a pergunta novamente\".\n10. se algum valor vinher NULL do banco responder \"Não tenho vendas cadastradas para esse dia\". \n11. Quanto ultrapassar o nível de tokens da api responder \"Pergunta ultrapassa o nível de tokens permitidos\"\n12. Não enviar nada em Inglês em hipotese alguma\n13. Antes de valores de dinheiro sempre enviar antes o R$\n14. Sempre que pedir para listar, detalhar, ou com detalhes enviar dados com quebra de linhas bonitos esteticamente e não tudo em linha única\n15. Se ultrapassar o limite de tokens responda \"Limite de tokens ultrapassado\"\n16. Você sempre deve contextualizar um pouco exemplo na resposta, nunca envie somente o resultado: Se a pergunta é sobre maior venda você deve responder \"A maior venda foi e o valor\", se a pergunta é sobre quantidade de filial você responde \"A quantidade de filial é e a quantidade\" Se a pergunta e sobre qual filial mais vendeu você responde \"A filial que mais vendeu é e o nome da filial e quanto ela vendeu, e va seguindo esses exemplos e adaptando a pergunta\"\n17. Se a pergunta envolve data como \"Quanto vendi do dia 1 ao dia 4 em SP\", \"Qual a maior venda de SP\" essas coisas assim além do nome da filial e valor enviar a data tambem\n18. Se tiver qualquer erro responda \"Tive um erro, faça a pergunta novamente\""
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        440,
        3020
      ],
      "id": "3b71f659-10dd-4c4d-86d7-cefd69a9fd0a",
      "name": "Puxar no Banco1"
    },
    {
      "parameters": {
        "model": "meta-llama/llama-4-maverick-17b-128e-instruct",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        460,
        3180
      ],
      "id": "af201769-1105-4fa0-aa73-8347068b28a5",
      "name": "Groq Chat Model3",
      "credentials": {
        "groqApi": {
          "id": "RXND1Dx3PYmWh1eD",
          "name": "GROQ"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "{{ $json.output }}"
      },
      "type": "n8n-nodes-base.microsoftSqlTool",
      "typeVersion": 1.1,
      "position": [
        620,
        3180
      ],
      "id": "e5d243e0-f535-465b-a6a6-2a8bcd9a88d2",
      "name": "Microsoft SQL1",
      "credentials": {
        "microsoftSql": {
          "id": "uuLVAMULLxXInMtK",
          "name": "Atos Capital"
        }
      }
    },
    {
      "parameters": {
        "resource": "messages-api",
        "operation": "send-audio",
        "instanceName": "=atoscapital",
        "remoteJid": "={{ $('If1').item.json.numero }}\n",
        "media": "={{ $json.data }}",
        "options_message": {
          "delay": 300
        }
      },
      "type": "n8n-nodes-evolution-api.evolutionApi",
      "typeVersion": 1,
      "position": [
        1600,
        3040
      ],
      "id": "0beceeef-b6ac-4f22-8b8c-07fbf6dbe26e",
      "name": "Enviar Resposta Pergunta1",
      "credentials": {
        "evolutionApi": {
          "id": "19NxyORpzpOmLGmT",
          "name": "Evolution API"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "rules": {
          "values": [
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "leftValue": "={{ $('Pegar Mensagem').item.json.body.data.messageType }}",
                    "rightValue": "conversation",
                    "operator": {
                      "type": "string",
                      "operation": "equals"
                    },
                    "id": "d2408fc5-ff67-4046-8992-9fa5c931da5a"
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Texto"
            },
            {
              "conditions": {
                "options": {
                  "caseSensitive": true,
                  "leftValue": "",
                  "typeValidation": "strict",
                  "version": 2
                },
                "conditions": [
                  {
                    "id": "68fc936c-c181-4dd5-b52c-a8d452e5f16c",
                    "leftValue": "={{ $('Pegar Mensagem').item.json.body.data.messageType }}",
                    "rightValue": "audioMessage",
                    "operator": {
                      "type": "string",
                      "operation": "equals",
                      "name": "filter.operator.equals"
                    }
                  }
                ],
                "combinator": "and"
              },
              "renameOutput": true,
              "outputKey": "Audio"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 3.2,
      "position": [
        -3560,
        1860
      ],
      "id": "eaf9a951-42e4-45f4-99b9-9a9427a00cf7",
      "name": "Separa Texto ou Audio"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "315c8165-b210-45b2-b841-738dac0e7026",
              "name": "base64",
              "value": "={{ $json.body.data.message.base64 }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -3760,
        1860
      ],
      "id": "b5526054-ca18-4e49-ae0d-f2b9e5f9d316",
      "name": "Pega o base64 do audio"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.groq.com/openai/v1/audio/transcriptions",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Conent-Type",
              "value": "multiplataform-data"
            },
            {
              "name": "Authorization",
              "value": "Bearer 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"
            }
          ]
        },
        "sendBody": true,
        "contentType": "multipart-form-data",
        "bodyParameters": {
          "parameters": [
            {
              "parameterType": "formBinaryData",
              "name": "file",
              "inputDataFieldName": "data"
            },
            {
              "name": "model",
              "value": "whisper-large-v3"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -3200,
        2020
      ],
      "id": "2e70c387-3bee-4fea-8170-6dbf97c502ad",
      "name": "API converter audio"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "cb1702d8-fb7d-4504-b976-515f19999f20",
              "name": "pergunta",
              "value": "={{ $json.text }}",
              "type": "string"
            },
            {
              "id": "a7423f66-bec7-4838-b60c-6ddc2c30bcb5",
              "name": "numero",
              "value": "={{ $('Filtrar mensagens do usuário').item.json.body.data.key.remoteJid }}",
              "type": "string"
            },
            {
              "id": "38aeb453-b193-49ed-95a8-316b12611eb9",
              "name": "dia atual",
              "value": "={{ $now }}",
              "type": "string"
            },
            {
              "id": "4b514d29-b91e-4845-aff0-7a357d93bd69",
              "name": "",
              "value": "",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -3000,
        2020
      ],
      "id": "a79426d3-aa4f-423b-96c9-cf513421856a",
      "name": "Salvar Numero e Pergunta Audio"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('Puxar no Banco1').item.json.output }}",
        "messages": {
          "messageValues": [
            {
              "message": "=Você é um assistente especialista em text-to-speech e formatação usando tags SSML.\n\nVocê irá receber um texto e a sua tarefa é aplicar tags SSML para deixá-lo mais natural no processo de geração de voz para parecer realmente uma pessoa falando.\n\nVocê deve converter apenas a mensagem que recebeu em áudio, não deve incluir nada a  mais do que o texto que recebeu\n\n### Formatação\n\n#### Datas e horas\n\nNo caso de datas e horas e valores, modifique o texto para um formato que seja mais natural quando falado.\n\nExemplos:\n\n- Entrada: '10:00'\n- Saída: 'dez horas'\n\n- Entrada: '22:00'\n- Saída: 'vinte e duas horas'\n\n- Entrada: '01/01/2025'\n- Saída: 'primeiro de janeiro de 2025'\n\n- Entrada: 'R$ 672.417,65'\n- Saída: 'seiscentos e setenta e dois mil quatrocentos e dezessete reais e  sessenta e cinco centavos'\n\n- Entrada: '14,97%'\n- Saída: 'quatorze virgula noventa e sete porcento'\n\n\n**FALE NORMALMENTECOMO UMA PESSOA HUMANA FALA, NÃO PRECISA FALAR CORRENDO**\n**QUANDO FOR FALAR SOBRE OUTRA FILIAL DE UMA PAUSADA NA FALA**\n**NÃO INCLUA NENHUMA INFORMAÇÃO ALÉM DO TEXTO CONVERTIDO**\n**NUNCA INCLUA CARACTER DE NOVA LINHA \"\\n\" NA SAÍDA**\n**NUNCA COLOQUE ÂNCORAS COMO ```ssml AO REDOR DO TEXTO**"
            }
          ]
        }
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.6,
      "position": [
        860,
        3040
      ],
      "id": "111010da-4fde-4669-a7f2-d9bd147aa46e",
      "name": "Formatar SSML"
    },
    {
      "parameters": {
        "model": "meta-llama/llama-4-maverick-17b-128e-instruct",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        900,
        3220
      ],
      "id": "84827e70-b6ba-47e7-9ca2-f31d75281d74",
      "name": "Groq Chat Model4",
      "credentials": {
        "groqApi": {
          "id": "RXND1Dx3PYmWh1eD",
          "name": "GROQ"
        }
      }
    },
    {
      "parameters": {
        "method": "POST",
        "url": "https://api.elevenlabs.io/v1/text-to-speech/xWdpADtEio43ew1zGxUQ",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "output_format",
              "value": "mp3_44100_128"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "xi-api-key",
              "value": "sk_c86cfe60d1d79599e792950fc2b8f22dfd4a192238a2fa99"
            }
          ]
        },
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "text",
              "value": "={{ $json.text }}"
            },
            {
              "name": "model_id",
              "value": "eleven_flash_v2_5"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1220,
        3040
      ],
      "id": "d63d5999-9834-45f4-ba5b-89b678acf30b",
      "name": "Gerar áudio",
      "retryOnFail": true
    },
    {
      "parameters": {
        "operation": "binaryToPropery",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        1420,
        3040
      ],
      "id": "aca36d75-89cb-4f81-8ad7-6ee8cffe7c02",
      "name": "Extract from File"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "b92aae35-cfd8-4661-bbc7-55fff9c56d21",
              "leftValue": "={{ $('Numeros Autorizados').item.json.pergunta }}",
              "rightValue": "relatorio",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "d3ed3590-687d-4729-9749-eb54d1ad46d8",
              "leftValue": "={{ $('Numeros Autorizados').item.json.pergunta }}",
              "rightValue": "relatório",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "a9c2cd3f-84ce-49ea-a16f-0a5d8c8671f5",
              "leftValue": "={{ $('Numeros Autorizados').item.json.pergunta }}",
              "rightValue": "Relatorio",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "7359d239-ac6f-4ae5-a907-3fb99adacdcc",
              "leftValue": "={{ $('Numeros Autorizados').item.json.pergunta }}",
              "rightValue": "Relatório",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "or"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -2000,
        1520
      ],
      "id": "05da35a6-7ba3-4c6b-b541-0cb498846cfa",
      "name": "If2"
    },
    {
      "parameters": {
        "promptType": "=define",
        "text": "={{ $('Numeros Autorizados').item.json.pergunta }}",
        "options": {
          "systemMessage": "=Você é um agente de IA e quando consultado você deve executar o sql a seguir e deve enviar como resposta somente os títulos e os resultados e enviar em formato tudo alinhado cada titulo em uma coluna estilo excel e logo abaixo os resultados com um em cada linha. Quero que envie tudo certo e formatado com quebra de linhas e tudo bem organizadinho. Você deve enviar os valores no padrão de moeda Real Brasileiro R$ usando \".\" para milhares e \",\" para decimais\n\n Titulos: \"FILIAL\", \"VENDAS 2024\", \"META MÊS\",\"PREVISÃO\", \"ACUM. 2024\", \"ACUM. META\", \"ACUM. VENDAS\", \"VENDAS DO DIA\", \"CRESC. 2025\",\"CRESC META\"\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        -980,
        1020
      ],
      "id": "531948a4-9880-46c2-bea1-40a6b11f61f9",
      "name": "Transformar em SQL2"
    },
    {
      "parameters": {
        "model": "meta-llama/llama-4-maverick-17b-128e-instruct",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        -980,
        1180
      ],
      "id": "55029a20-c564-42f9-a659-6eef6908c889",
      "name": "Groq Chat Model5",
      "credentials": {
        "groqApi": {
          "id": "RXND1Dx3PYmWh1eD",
          "name": "GROQ"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "DECLARE @data_inicio DATE = CASE WHEN DAY(GETDATE()) = 1 \n                              THEN DATEADD(MONTH, -1, CAST(CONVERT(VARCHAR(6), YEAR(GETDATE())) + RIGHT('0' + CONVERT(VARCHAR(2), MONTH(GETDATE())), 2) + '01' AS DATE)) \n                              ELSE CAST(CONVERT(VARCHAR(6), YEAR(GETDATE())) + RIGHT('0' + CONVERT(VARCHAR(2), MONTH(GETDATE())), 2) + '01' AS DATE) \n                         END; \n\nWITH MaxDatas AS ( \n    SELECT nmFilial, MAX(dtVenda) AS max_dtVenda \n    FROM tbVendasDashboard \n    WHERE dtVenda >= @data_inicio AND dtVenda < CAST(GETDATE() AS DATE) AND vlVenda IS NOT NULL \n    GROUP BY nmFilial \n), \nPrevisao AS ( \n    SELECT v.nmFilial, \n           'R$ ' + REPLACE(REPLACE(CONVERT(VARCHAR, CAST(SUM(v.vlVenda) / NULLIF(COUNT(DISTINCT CONVERT(VARCHAR, v.dtVenda, 112)), 0) * \n                  DAY(DATEADD(DAY, -1, DATEADD(MONTH, 1, @data_inicio))) AS MONEY), 1), '.', ','), ',', '.') AS previsao_vendas \n    FROM tbVendasDashboard v \n    INNER JOIN MaxDatas md ON v.nmFilial = md.nmFilial \n    WHERE v.dtVenda >= @data_inicio AND v.dtVenda <= md.max_dtVenda AND v.vlVenda IS NOT NULL \n    GROUP BY v.nmFilial \n), \nDiasValidos AS ( \n    SELECT DISTINCT DAY(dtVenda) AS dia, nmFilial \n    FROM tbVendasDashboard \n    WHERE MONTH(dtVenda) = MONTH(GETDATE()) AND YEAR(dtVenda) = YEAR(GETDATE()) AND dtVenda <= GETDATE() AND vlVenda IS NOT NULL \n), \nAcumuloAnoAnterior AS ( \n    SELECT nmFilial, vlVenda, DAY(dtVenda) AS dia \n    FROM tbVendasDashboard \n    WHERE MONTH(dtVenda) = MONTH(GETDATE()) AND YEAR(dtVenda) = YEAR(DATEADD(YEAR, -1, GETDATE())) AND vlVenda IS NOT NULL \n), \nAcumulo AS ( \n    SELECT d.nmFilial, \n           'R$ ' + REPLACE(REPLACE(CONVERT(VARCHAR, CAST(CASE WHEN DAY(GETDATE()) = 1 THEN ( \n               SELECT SUM(vlVenda) \n               FROM tbVendasDashboard t \n               WHERE MONTH(dtVenda) = MONTH(DATEADD(MONTH, -1, GETDATE())) \n               AND YEAR(dtVenda) = YEAR(DATEADD(YEAR, -1, GETDATE())) \n               AND vlVenda IS NOT NULL \n               AND t.nmFilial = d.nmFilial \n           ) ELSE SUM(a.vlVenda) END AS MONEY), 1), '.', ','), ',', '.') AS acumulo_2024 \n    FROM DiasValidos d \n    LEFT JOIN AcumuloAnoAnterior a ON a.dia = d.dia AND a.nmFilial = d.nmFilial \n    GROUP BY d.nmFilial \n), \nDiasValidos2 AS ( \n    SELECT DISTINCT DAY(dtVenda) AS dia \n    FROM dbo.tbVendasDashboard \n    WHERE MONTH(dtVenda) = MONTH(GETDATE()) AND YEAR(dtVenda) = YEAR(GETDATE()) AND dtVenda <= GETDATE() AND vlVenda IS NOT NULL \n), \nAcumuloAnoAnterior2 AS ( \n    SELECT nmFilial, vlVenda \n    FROM dbo.tbVendasDashboard \n    WHERE MONTH(dtVenda) = MONTH(GETDATE()) AND YEAR(dtVenda) = YEAR(DATEADD(YEAR, -1, GETDATE())) AND vlVenda IS NOT NULL AND DAY(dtVenda) IN (SELECT dia FROM DiasValidos2) \n), \nSomaAnoAnterior AS ( \n    SELECT nmFilial, SUM(vlVenda) AS soma_vlVenda \n    FROM AcumuloAnoAnterior2 \n    GROUP BY nmFilial \n), \nSomaUltimoMesAnoAnterior AS ( \n    SELECT nmFilial, SUM(vlVenda) AS soma_vlVenda \n    FROM dbo.tbVendasDashboard \n    WHERE MONTH(dtVenda) = MONTH(DATEADD(MONTH, -1, GETDATE())) AND YEAR(dtVenda) = YEAR(DATEADD(YEAR, -1, GETDATE())) AND vlVenda IS NOT NULL \n    GROUP BY nmFilial \n), \nAcumuloMeta AS ( \n    SELECT COALESCE(a.nmFilial, b.nmFilial) AS nmFilial, \n           'R$ ' + REPLACE(REPLACE(CONVERT(VARCHAR, CAST(CASE WHEN DAY(GETDATE()) = 1 THEN b.soma_vlVenda ELSE a.soma_vlVenda * 1.05 END AS MONEY), 1), '.', ','), ',', '.') AS acumulo_meta \n    FROM SomaAnoAnterior a \n    FULL OUTER JOIN SomaUltimoMesAnoAnterior b ON a.nmFilial = b.nmFilial \n), \nAcumuladoVendas AS ( \n    SELECT nmFilial, \n           'R$ ' + REPLACE(REPLACE(CONVERT(VARCHAR, CAST(SUM(vlVenda) AS MONEY), 1), '.', ','), ',', '.') AS acumulado_vendas \n    FROM tbVendasDashboard \n    WHERE YEAR(dtVenda) = CASE WHEN DAY(GETDATE()) = 1 THEN YEAR(DATEADD(MONTH, -1, GETDATE())) ELSE YEAR(GETDATE()) END \n    AND MONTH(dtVenda) = CASE WHEN DAY(GETDATE()) = 1 THEN MONTH(DATEADD(MONTH, -1, GETDATE())) ELSE MONTH(GETDATE()) END \n    GROUP BY nmFilial \n), \nUltimaVendaAtual AS ( \n    SELECT t1.nmFilial, \n           'R$ ' + REPLACE(REPLACE(CONVERT(VARCHAR, CAST(t1.vlVenda AS MONEY), 1), '.', ','), ',', '.') AS vlVenda \n    FROM tbVendasDashboard t1 \n    INNER JOIN ( \n        SELECT nmFilial, MAX(dtVenda) AS ultima_data \n        FROM tbVendasDashboard \n        WHERE vlVenda IS NOT NULL AND YEAR(dtVenda) = YEAR(GETDATE()) AND MONTH(dtVenda) <= MONTH(GETDATE()) \n        GROUP BY nmFilial \n    ) t2 ON t1.nmFilial = t2.nmFilial AND t1.dtVenda = t2.ultima_data \n), \nDiasValidosCresc AS ( \n    SELECT DISTINCT DAY(dtVenda) AS dia \n    FROM dbo.tbVendasDashboard \n    WHERE MONTH(dtVenda) = MONTH(GETDATE()) AND YEAR(dtVenda) = YEAR(GETDATE()) AND dtVenda <= GETDATE() AND vlVenda IS NOT NULL \n), \nAcumuloAnoAnteriorCresc AS ( \n    SELECT nmFilial, vlVenda \n    FROM dbo.tbVendasDashboard \n    WHERE MONTH(dtVenda) = MONTH(GETDATE()) AND YEAR(dtVenda) = YEAR(DATEADD(YEAR, -1, GETDATE())) AND vlVenda IS NOT NULL AND DAY(dtVenda) IN (SELECT dia FROM DiasValidosCresc) \n), \nVendasAnoAnterior AS ( \n    SELECT nmFilial, \n           CASE WHEN DAY(GETDATE()) = 1 THEN ( \n               SELECT SUM(vlVenda) \n               FROM dbo.tbVendasDashboard AS sub \n               WHERE MONTH(dtVenda) = MONTH(DATEADD(MONTH, -1, GETDATE())) \n               AND YEAR(dtVenda) = YEAR(DATEADD(YEAR, -1, GETDATE())) \n               AND vlVenda IS NOT NULL \n               AND sub.nmFilial = main.nmFilial \n           ) ELSE ( \n               SELECT SUM(vlVenda) \n               FROM AcumuloAnoAnteriorCresc AS a \n               WHERE a.nmFilial = main.nmFilial \n           ) END AS acumulo_ano_anterior \n    FROM (SELECT DISTINCT nmFilial FROM dbo.tbVendasDashboard) AS main \n), \nVendasAnoAtual AS ( \n    SELECT nmFilial, SUM(vlVenda) AS total_ano_atual \n    FROM dbo.tbVendasDashboard \n    WHERE YEAR(dtVenda) = CASE WHEN DAY(GETDATE()) = 1 THEN YEAR(DATEADD(MONTH, -1, GETDATE())) ELSE YEAR(GETDATE()) END \n    AND MONTH(dtVenda) = CASE WHEN DAY(GETDATE()) = 1 THEN MONTH(DATEADD(MONTH, -1, GETDATE())) ELSE MONTH(GETDATE()) END \n    AND DAY(dtVenda) BETWEEN 1 AND DAY(DATEADD(DAY, -1, GETDATE())) \n    GROUP BY nmFilial \n), \nCrescimento AS ( \n    SELECT a.nmFilial, \n           REPLACE(STR(ROUND(((a.total_ano_atual / NULLIF(b.acumulo_ano_anterior, 0)) - 1) * 100, 2), 10, 2), ' ', '') + '%' AS cresc_vs_ano_anterior \n    FROM VendasAnoAtual a \n    JOIN VendasAnoAnterior b ON a.nmFilial = b.nmFilial \n    WHERE b.acumulo_ano_anterior IS NOT NULL AND b.acumulo_ano_anterior <> 0 \n), \nDiasValidosMeta AS ( \n    SELECT DISTINCT DAY(dtVenda) AS dia \n    FROM dbo.tbVendasDashboard \n    WHERE MONTH(dtVenda) = MONTH(GETDATE()) AND YEAR(dtVenda) = YEAR(GETDATE()) AND dtVenda <= GETDATE() AND vlVenda IS NOT NULL \n), \nAcumuloAnoAnteriorMeta AS ( \n    SELECT nmFilial, vlVenda \n    FROM dbo.tbVendasDashboard \n    WHERE MONTH(dtVenda) = MONTH(GETDATE()) AND YEAR(dtVenda) = YEAR(DATEADD(YEAR, -1, GETDATE())) AND vlVenda IS NOT NULL AND DAY(dtVenda) IN (SELECT dia FROM DiasValidosMeta) \n), \nVendasAnoAnteriorMeta AS ( \n    SELECT f.nmFilial, \n           CASE WHEN DAY(GETDATE()) = 1 THEN ( \n               SELECT SUM(vlVenda) \n               FROM dbo.tbVendasDashboard AS t \n               WHERE MONTH(dtVenda) = MONTH(DATEADD(MONTH, -1, GETDATE())) \n               AND YEAR(dtVenda) = YEAR(DATEADD(YEAR, -1, GETDATE())) \n               AND vlVenda IS NOT NULL \n               AND t.nmFilial = f.nmFilial \n           ) ELSE ( \n               SELECT SUM(vlVenda) \n               FROM AcumuloAnoAnteriorMeta a \n               WHERE a.nmFilial = f.nmFilial \n           ) * 1.05 END AS acumulo_meta_ano_anterior \n    FROM (SELECT DISTINCT nmFilial FROM dbo.tbVendasDashboard) f \n), \nVendasAnoAtualMeta AS ( \n    SELECT nmFilial, SUM(vlVenda) AS total_ano_atual \n    FROM dbo.tbVendasDashboard \n    WHERE YEAR(dtVenda) = CASE WHEN DAY(GETDATE()) = 1 THEN YEAR(DATEADD(MONTH, -1, GETDATE())) ELSE YEAR(GETDATE()) END \n    AND MONTH(dtVenda) = CASE WHEN DAY(GETDATE()) = 1 THEN MONTH(DATEADD(MONTH, -1, GETDATE())) ELSE MONTH(GETDATE()) END \n    AND DAY(dtVenda) BETWEEN 1 AND DAY(DATEADD(DAY, -1, GETDATE())) \n    GROUP BY nmFilial \n), \nCrescimentoMeta AS ( \n    SELECT a.nmFilial, \n           REPLACE(STR(ROUND(((a.total_ano_atual / NULLIF(b.acumulo_meta_ano_anterior, 0)) - 1) * 100, 2), 10, 2), ' ', '') + '%' AS cresc_meta \n    FROM VendasAnoAtualMeta a \n    JOIN VendasAnoAnteriorMeta b ON a.nmFilial = b.nmFilial \n    WHERE b.acumulo_meta_ano_anterior IS NOT NULL AND b.acumulo_meta_ano_anterior <> 0 \n) \nSELECT f.nmFilial, \n       'R$ ' + REPLACE(REPLACE(CONVERT(VARCHAR, CAST(ISNULL(SUM(v.vlVenda), 0) AS MONEY), 1), '.', ','), ',', '.') AS vendas_2024, \n       'R$ ' + REPLACE(REPLACE(CONVERT(VARCHAR, CAST(ISNULL(SUM(v.vlVenda), 0) * 1.05 AS MONEY), 1), '.', ','), ',', '.') AS meta_mes, \n       ISNULL(p.previsao_vendas, 'R$ 0,00') AS previsao_vendas, \n       ISNULL(a.acumulo_2024, 'R$ 0,00') AS acumulo_2024, \n       ISNULL(am.acumulo_meta, 'R$ 0,00') AS acumulo_meta, \n       ISNULL(av.acumulado_vendas, 'R$ 0,00') AS acumulado_vendas, \n       ISNULL(u.vlVenda, 'R$ 0,00') AS ultima_venda_valor, \n       ISNULL(c.cresc_vs_ano_anterior, '0,00%') AS crescimento_vs_ano_anterior, \n       ISNULL(cm.cresc_meta, '0,00%') AS crescimento_vs_meta \nFROM (SELECT DISTINCT nmFilial FROM tbVendasDashboard) f \nLEFT JOIN tbVendasDashboard v ON f.nmFilial = v.nmFilial AND YEAR(v.dtVenda) = YEAR(DATEADD(YEAR, -1, GETDATE())) AND MONTH(v.dtVenda) = CASE WHEN DAY(GETDATE()) = 1 THEN MONTH(DATEADD(MONTH, -1, GETDATE())) ELSE MONTH(GETDATE()) END \nLEFT JOIN Previsao p ON f.nmFilial = p.nmFilial \nLEFT JOIN Acumulo a ON f.nmFilial = a.nmFilial \nLEFT JOIN AcumuloMeta am ON f.nmFilial = am.nmFilial \nLEFT JOIN AcumuladoVendas av ON f.nmFilial = av.nmFilial \nLEFT JOIN UltimaVendaAtual u ON f.nmFilial = u.nmFilial \nLEFT JOIN Crescimento c ON f.nmFilial = c.nmFilial \nLEFT JOIN CrescimentoMeta cm ON f.nmFilial = cm.nmFilial \nGROUP BY f.nmFilial, p.previsao_vendas, a.acumulo_2024, am.acumulo_meta, av.acumulado_vendas, u.vlVenda, c.cresc_vs_ano_anterior, cm.cresc_meta \nORDER BY f.nmFilial;"
      },
      "type": "n8n-nodes-base.microsoftSqlTool",
      "typeVersion": 1.1,
      "position": [
        -760,
        1180
      ],
      "id": "78a25ef0-a9e1-428c-a1d4-f19c5d4de28e",
      "name": "Microsoft SQL2",
      "credentials": {
        "microsoftSql": {
          "id": "uuLVAMULLxXInMtK",
          "name": "Atos Capital"
        }
      }
    },
    {
      "parameters": {
        "resource": "messages-api",
        "operation": "send-document",
        "instanceName": "=atoscapital",
        "remoteJid": "={{ $('If').item.json.numero }}\n",
        "media": "={{ $json.url }}",
        "caption": "Segue relatório conforme solicitado:",
        "fileName": "=Relatorio emitido em {{ new Date().toLocaleDateString('pt-BR', { timeZone: 'America/Sao_Paulo' }) }}.pdf",
        "options_message": {}
      },
      "type": "n8n-nodes-evolution-api.evolutionApi",
      "typeVersion": 1,
      "position": [
        -260,
        1020
      ],
      "id": "fc57933d-8e8a-491c-897c-db84ff24c0dd",
      "name": "Enviar Resposta Pergunta4",
      "credentials": {
        "evolutionApi": {
          "id": "19NxyORpzpOmLGmT",
          "name": "Evolution API"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "return [{\n  json: {\n    html: `\n    <html>\n    <head>\n      <style>\n        table {\n          width: 100%;\n          border-collapse: collapse;\n        }\n        th, td {\n          border: 1px solid #000;\n          padding: 8px;\n          font-size: 12px;\n        }\n        th {\n          background-color: #e0e0e0;\n        }\n        h2 {\n          text-align: center;\n        }\n      </style>\n    </head>\n    <body>\n      <h2>Relatório de Vendas emitido em - ${new Date().toLocaleDateString('pt-BR', { timeZone: 'America/Sao_Paulo' })}</h2>\n<h4 style=\"text-align: center; width: 100%;\">Relatório referente às vendas do dia -  ${$('Microsoft SQL4').item.json.ultima_data_venda}</h4>\n\n\n\n\n      <table>\n        <thead>\n          <tr>\n            <th>FILIAL</th>\n            <th>VENDAS 2024</th>\n            <th>META MÊS</th>\n            <th>PREVISÃO</th>\n            <th>ACUM. 2024</th>\n            <th>ACUM. META</th>\n            <th>ACUM. VENDAS</th>\n            <th>VENDAS DO DIA</th>\n            <th>CRESC. 2025</th>\n            <th>CRESC META</th>\n          </tr>\n        </thead>\n        <tbody>\n          ${$json[\"output\"].split(\"\\n\").slice(2).map(row => {\n            const cols = row.split(\"|\").map(c => c.trim());\n            if (cols.length === 10) {\n              return `<tr>${cols.map(c => `<td>${c}</td>`).join('')}</tr>`;\n            }\n            return '';\n          }).join('')}\n        </tbody>\n      </table>\n    </body>\n    </html>`\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -620,
        1020
      ],
      "id": "893e6565-2bf0-4883-92a7-efbf863bff39",
      "name": "Converter"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "b92aae35-cfd8-4661-bbc7-55fff9c56d21",
              "leftValue": "={{ $('Numeros Autorizados1').item.json.pergunta }}",
              "rightValue": "relatório",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "e170a3df-4b62-4349-b1c5-8298dd37c34e",
              "leftValue": "={{ $('Numeros Autorizados1').item.json.pergunta }}",
              "rightValue": "relatorio",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "or"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1540,
        2120
      ],
      "id": "fceb785a-6c00-4978-bc65-fc4bbdefca41",
      "name": "If3"
    },
    {
      "parameters": {
        "operation": "URL/HTML to PDF",
        "convertType": "htmlToPDF",
        "html": "={{ $json.html }}",
        "advancedOptions": {
          "orientation": "landscape",
          "paperSize": "a4"
        }
      },
      "type": "n8n-nodes-pdfco.PDFco Api",
      "typeVersion": 1,
      "position": [
        -440,
        1020
      ],
      "id": "ea621ed2-0b61-40a7-9605-fa2aefe91756",
      "name": "PDFco Api1",
      "credentials": {
        "pdfcoApi": {
          "id": "O4EzIAL3I0TSyBzc",
          "name": "PDF.co account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "=define",
        "text": "={{ $('Numeros Autorizados1').item.json.pergunta }}",
        "options": {
          "systemMessage": "=Você é um agente de IA e quando consultado você deve executar o sql a seguir e deve enviar como resposta somente os títulos e os resultados e enviar em formato tudo alinhado cada titulo em uma coluna estilo excel e logo abaixo os resultados com um em cada linha. Quero que envie tudo certo e formatado com quebra de linhas e tudo bem organizadinho. Você deve enviar os valores no padrão de moeda Real Brasileiro R$ usando \".\" para milhares e \",\" para decimais\n\n Titulos: \"FILIAL\", \"VENDAS 2024\", \"META MÊS\",\"PREVISÃO\", \"ACUM. 2024\", \"ACUM. META\", \"ACUM. VENDAS\", \"VENDAS DO DIA\", \"CRESC. 2025\",\"CRESC META\"\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        -560,
        2040
      ],
      "id": "8e8109d9-ca0b-48f0-b1ea-8685b0641357",
      "name": "Transformar em SQL3"
    },
    {
      "parameters": {
        "model": "meta-llama/llama-4-maverick-17b-128e-instruct",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        -540,
        2240
      ],
      "id": "b9b573b4-4fac-49af-ab3d-093765c8e150",
      "name": "Groq Chat Model6",
      "credentials": {
        "groqApi": {
          "id": "RXND1Dx3PYmWh1eD",
          "name": "GROQ"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "DECLARE @data_inicio DATE = CASE WHEN DAY(GETDATE()) = 1 \n                              THEN DATEADD(MONTH, -1, CAST(CONVERT(VARCHAR(6), YEAR(GETDATE())) + RIGHT('0' + CONVERT(VARCHAR(2), MONTH(GETDATE())), 2) + '01' AS DATE)) \n                              ELSE CAST(CONVERT(VARCHAR(6), YEAR(GETDATE())) + RIGHT('0' + CONVERT(VARCHAR(2), MONTH(GETDATE())), 2) + '01' AS DATE) \n                         END; \n\nWITH MaxDatas AS ( \n    SELECT nmFilial, MAX(dtVenda) AS max_dtVenda \n    FROM tbVendasDashboard \n    WHERE dtVenda >= @data_inicio AND dtVenda < CAST(GETDATE() AS DATE) AND vlVenda IS NOT NULL \n    GROUP BY nmFilial \n), \nPrevisao AS ( \n    SELECT v.nmFilial, \n           'R$ ' + REPLACE(REPLACE(CONVERT(VARCHAR, CAST(SUM(v.vlVenda) / NULLIF(COUNT(DISTINCT CONVERT(VARCHAR, v.dtVenda, 112)), 0) * \n                  DAY(DATEADD(DAY, -1, DATEADD(MONTH, 1, @data_inicio))) AS MONEY), 1), '.', ','), ',', '.') AS previsao_vendas \n    FROM tbVendasDashboard v \n    INNER JOIN MaxDatas md ON v.nmFilial = md.nmFilial \n    WHERE v.dtVenda >= @data_inicio AND v.dtVenda <= md.max_dtVenda AND v.vlVenda IS NOT NULL \n    GROUP BY v.nmFilial \n), \nDiasValidos AS ( \n    SELECT DISTINCT DAY(dtVenda) AS dia, nmFilial \n    FROM tbVendasDashboard \n    WHERE MONTH(dtVenda) = MONTH(GETDATE()) AND YEAR(dtVenda) = YEAR(GETDATE()) AND dtVenda <= GETDATE() AND vlVenda IS NOT NULL \n), \nAcumuloAnoAnterior AS ( \n    SELECT nmFilial, vlVenda, DAY(dtVenda) AS dia \n    FROM tbVendasDashboard \n    WHERE MONTH(dtVenda) = MONTH(GETDATE()) AND YEAR(dtVenda) = YEAR(DATEADD(YEAR, -1, GETDATE())) AND vlVenda IS NOT NULL \n), \nAcumulo AS ( \n    SELECT d.nmFilial, \n           'R$ ' + REPLACE(REPLACE(CONVERT(VARCHAR, CAST(CASE WHEN DAY(GETDATE()) = 1 THEN ( \n               SELECT SUM(vlVenda) \n               FROM tbVendasDashboard t \n               WHERE MONTH(dtVenda) = MONTH(DATEADD(MONTH, -1, GETDATE())) \n               AND YEAR(dtVenda) = YEAR(DATEADD(YEAR, -1, GETDATE())) \n               AND vlVenda IS NOT NULL \n               AND t.nmFilial = d.nmFilial \n           ) ELSE SUM(a.vlVenda) END AS MONEY), 1), '.', ','), ',', '.') AS acumulo_2024 \n    FROM DiasValidos d \n    LEFT JOIN AcumuloAnoAnterior a ON a.dia = d.dia AND a.nmFilial = d.nmFilial \n    GROUP BY d.nmFilial \n), \nDiasValidos2 AS ( \n    SELECT DISTINCT DAY(dtVenda) AS dia \n    FROM dbo.tbVendasDashboard \n    WHERE MONTH(dtVenda) = MONTH(GETDATE()) AND YEAR(dtVenda) = YEAR(GETDATE()) AND dtVenda <= GETDATE() AND vlVenda IS NOT NULL \n), \nAcumuloAnoAnterior2 AS ( \n    SELECT nmFilial, vlVenda \n    FROM dbo.tbVendasDashboard \n    WHERE MONTH(dtVenda) = MONTH(GETDATE()) AND YEAR(dtVenda) = YEAR(DATEADD(YEAR, -1, GETDATE())) AND vlVenda IS NOT NULL AND DAY(dtVenda) IN (SELECT dia FROM DiasValidos2) \n), \nSomaAnoAnterior AS ( \n    SELECT nmFilial, SUM(vlVenda) AS soma_vlVenda \n    FROM AcumuloAnoAnterior2 \n    GROUP BY nmFilial \n), \nSomaUltimoMesAnoAnterior AS ( \n    SELECT nmFilial, SUM(vlVenda) AS soma_vlVenda \n    FROM dbo.tbVendasDashboard \n    WHERE MONTH(dtVenda) = MONTH(DATEADD(MONTH, -1, GETDATE())) AND YEAR(dtVenda) = YEAR(DATEADD(YEAR, -1, GETDATE())) AND vlVenda IS NOT NULL \n    GROUP BY nmFilial \n), \nAcumuloMeta AS ( \n    SELECT COALESCE(a.nmFilial, b.nmFilial) AS nmFilial, \n           'R$ ' + REPLACE(REPLACE(CONVERT(VARCHAR, CAST(CASE WHEN DAY(GETDATE()) = 1 THEN b.soma_vlVenda ELSE a.soma_vlVenda * 1.05 END AS MONEY), 1), '.', ','), ',', '.') AS acumulo_meta \n    FROM SomaAnoAnterior a \n    FULL OUTER JOIN SomaUltimoMesAnoAnterior b ON a.nmFilial = b.nmFilial \n), \nAcumuladoVendas AS ( \n    SELECT nmFilial, \n           'R$ ' + REPLACE(REPLACE(CONVERT(VARCHAR, CAST(SUM(vlVenda) AS MONEY), 1), '.', ','), ',', '.') AS acumulado_vendas \n    FROM tbVendasDashboard \n    WHERE YEAR(dtVenda) = CASE WHEN DAY(GETDATE()) = 1 THEN YEAR(DATEADD(MONTH, -1, GETDATE())) ELSE YEAR(GETDATE()) END \n    AND MONTH(dtVenda) = CASE WHEN DAY(GETDATE()) = 1 THEN MONTH(DATEADD(MONTH, -1, GETDATE())) ELSE MONTH(GETDATE()) END \n    GROUP BY nmFilial \n), \nUltimaVendaAtual AS ( \n    SELECT t1.nmFilial, \n           'R$ ' + REPLACE(REPLACE(CONVERT(VARCHAR, CAST(t1.vlVenda AS MONEY), 1), '.', ','), ',', '.') AS vlVenda \n    FROM tbVendasDashboard t1 \n    INNER JOIN ( \n        SELECT nmFilial, MAX(dtVenda) AS ultima_data \n        FROM tbVendasDashboard \n        WHERE vlVenda IS NOT NULL AND YEAR(dtVenda) = YEAR(GETDATE()) AND MONTH(dtVenda) <= MONTH(GETDATE()) \n        GROUP BY nmFilial \n    ) t2 ON t1.nmFilial = t2.nmFilial AND t1.dtVenda = t2.ultima_data \n), \nDiasValidosCresc AS ( \n    SELECT DISTINCT DAY(dtVenda) AS dia \n    FROM dbo.tbVendasDashboard \n    WHERE MONTH(dtVenda) = MONTH(GETDATE()) AND YEAR(dtVenda) = YEAR(GETDATE()) AND dtVenda <= GETDATE() AND vlVenda IS NOT NULL \n), \nAcumuloAnoAnteriorCresc AS ( \n    SELECT nmFilial, vlVenda \n    FROM dbo.tbVendasDashboard \n    WHERE MONTH(dtVenda) = MONTH(GETDATE()) AND YEAR(dtVenda) = YEAR(DATEADD(YEAR, -1, GETDATE())) AND vlVenda IS NOT NULL AND DAY(dtVenda) IN (SELECT dia FROM DiasValidosCresc) \n), \nVendasAnoAnterior AS ( \n    SELECT nmFilial, \n           CASE WHEN DAY(GETDATE()) = 1 THEN ( \n               SELECT SUM(vlVenda) \n               FROM dbo.tbVendasDashboard AS sub \n               WHERE MONTH(dtVenda) = MONTH(DATEADD(MONTH, -1, GETDATE())) \n               AND YEAR(dtVenda) = YEAR(DATEADD(YEAR, -1, GETDATE())) \n               AND vlVenda IS NOT NULL \n               AND sub.nmFilial = main.nmFilial \n           ) ELSE ( \n               SELECT SUM(vlVenda) \n               FROM AcumuloAnoAnteriorCresc AS a \n               WHERE a.nmFilial = main.nmFilial \n           ) END AS acumulo_ano_anterior \n    FROM (SELECT DISTINCT nmFilial FROM dbo.tbVendasDashboard) AS main \n), \nVendasAnoAtual AS ( \n    SELECT nmFilial, SUM(vlVenda) AS total_ano_atual \n    FROM dbo.tbVendasDashboard \n    WHERE YEAR(dtVenda) = CASE WHEN DAY(GETDATE()) = 1 THEN YEAR(DATEADD(MONTH, -1, GETDATE())) ELSE YEAR(GETDATE()) END \n    AND MONTH(dtVenda) = CASE WHEN DAY(GETDATE()) = 1 THEN MONTH(DATEADD(MONTH, -1, GETDATE())) ELSE MONTH(GETDATE()) END \n    AND DAY(dtVenda) BETWEEN 1 AND DAY(DATEADD(DAY, -1, GETDATE())) \n    GROUP BY nmFilial \n), \nCrescimento AS ( \n    SELECT a.nmFilial, \n           REPLACE(STR(ROUND(((a.total_ano_atual / NULLIF(b.acumulo_ano_anterior, 0)) - 1) * 100, 2), 10, 2), ' ', '') + '%' AS cresc_vs_ano_anterior \n    FROM VendasAnoAtual a \n    JOIN VendasAnoAnterior b ON a.nmFilial = b.nmFilial \n    WHERE b.acumulo_ano_anterior IS NOT NULL AND b.acumulo_ano_anterior <> 0 \n), \nDiasValidosMeta AS ( \n    SELECT DISTINCT DAY(dtVenda) AS dia \n    FROM dbo.tbVendasDashboard \n    WHERE MONTH(dtVenda) = MONTH(GETDATE()) AND YEAR(dtVenda) = YEAR(GETDATE()) AND dtVenda <= GETDATE() AND vlVenda IS NOT NULL \n), \nAcumuloAnoAnteriorMeta AS ( \n    SELECT nmFilial, vlVenda \n    FROM dbo.tbVendasDashboard \n    WHERE MONTH(dtVenda) = MONTH(GETDATE()) AND YEAR(dtVenda) = YEAR(DATEADD(YEAR, -1, GETDATE())) AND vlVenda IS NOT NULL AND DAY(dtVenda) IN (SELECT dia FROM DiasValidosMeta) \n), \nVendasAnoAnteriorMeta AS ( \n    SELECT f.nmFilial, \n           CASE WHEN DAY(GETDATE()) = 1 THEN ( \n               SELECT SUM(vlVenda) \n               FROM dbo.tbVendasDashboard AS t \n               WHERE MONTH(dtVenda) = MONTH(DATEADD(MONTH, -1, GETDATE())) \n               AND YEAR(dtVenda) = YEAR(DATEADD(YEAR, -1, GETDATE())) \n               AND vlVenda IS NOT NULL \n               AND t.nmFilial = f.nmFilial \n           ) ELSE ( \n               SELECT SUM(vlVenda) \n               FROM AcumuloAnoAnteriorMeta a \n               WHERE a.nmFilial = f.nmFilial \n           ) * 1.05 END AS acumulo_meta_ano_anterior \n    FROM (SELECT DISTINCT nmFilial FROM dbo.tbVendasDashboard) f \n), \nVendasAnoAtualMeta AS ( \n    SELECT nmFilial, SUM(vlVenda) AS total_ano_atual \n    FROM dbo.tbVendasDashboard \n    WHERE YEAR(dtVenda) = CASE WHEN DAY(GETDATE()) = 1 THEN YEAR(DATEADD(MONTH, -1, GETDATE())) ELSE YEAR(GETDATE()) END \n    AND MONTH(dtVenda) = CASE WHEN DAY(GETDATE()) = 1 THEN MONTH(DATEADD(MONTH, -1, GETDATE())) ELSE MONTH(GETDATE()) END \n    AND DAY(dtVenda) BETWEEN 1 AND DAY(DATEADD(DAY, -1, GETDATE())) \n    GROUP BY nmFilial \n), \nCrescimentoMeta AS ( \n    SELECT a.nmFilial, \n           REPLACE(STR(ROUND(((a.total_ano_atual / NULLIF(b.acumulo_meta_ano_anterior, 0)) - 1) * 100, 2), 10, 2), ' ', '') + '%' AS cresc_meta \n    FROM VendasAnoAtualMeta a \n    JOIN VendasAnoAnteriorMeta b ON a.nmFilial = b.nmFilial \n    WHERE b.acumulo_meta_ano_anterior IS NOT NULL AND b.acumulo_meta_ano_anterior <> 0 \n) \nSELECT f.nmFilial, \n       'R$ ' + REPLACE(REPLACE(CONVERT(VARCHAR, CAST(ISNULL(SUM(v.vlVenda), 0) AS MONEY), 1), '.', ','), ',', '.') AS vendas_2024, \n       'R$ ' + REPLACE(REPLACE(CONVERT(VARCHAR, CAST(ISNULL(SUM(v.vlVenda), 0) * 1.05 AS MONEY), 1), '.', ','), ',', '.') AS meta_mes, \n       ISNULL(p.previsao_vendas, 'R$ 0,00') AS previsao_vendas, \n       ISNULL(a.acumulo_2024, 'R$ 0,00') AS acumulo_2024, \n       ISNULL(am.acumulo_meta, 'R$ 0,00') AS acumulo_meta, \n       ISNULL(av.acumulado_vendas, 'R$ 0,00') AS acumulado_vendas, \n       ISNULL(u.vlVenda, 'R$ 0,00') AS ultima_venda_valor, \n       ISNULL(c.cresc_vs_ano_anterior, '0,00%') AS crescimento_vs_ano_anterior, \n       ISNULL(cm.cresc_meta, '0,00%') AS crescimento_vs_meta \nFROM (SELECT DISTINCT nmFilial FROM tbVendasDashboard) f \nLEFT JOIN tbVendasDashboard v ON f.nmFilial = v.nmFilial AND YEAR(v.dtVenda) = YEAR(DATEADD(YEAR, -1, GETDATE())) AND MONTH(v.dtVenda) = CASE WHEN DAY(GETDATE()) = 1 THEN MONTH(DATEADD(MONTH, -1, GETDATE())) ELSE MONTH(GETDATE()) END \nLEFT JOIN Previsao p ON f.nmFilial = p.nmFilial \nLEFT JOIN Acumulo a ON f.nmFilial = a.nmFilial \nLEFT JOIN AcumuloMeta am ON f.nmFilial = am.nmFilial \nLEFT JOIN AcumuladoVendas av ON f.nmFilial = av.nmFilial \nLEFT JOIN UltimaVendaAtual u ON f.nmFilial = u.nmFilial \nLEFT JOIN Crescimento c ON f.nmFilial = c.nmFilial \nLEFT JOIN CrescimentoMeta cm ON f.nmFilial = cm.nmFilial \nGROUP BY f.nmFilial, p.previsao_vendas, a.acumulo_2024, am.acumulo_meta, av.acumulado_vendas, u.vlVenda, c.cresc_vs_ano_anterior, cm.cresc_meta \nORDER BY f.nmFilial;"
      },
      "type": "n8n-nodes-base.microsoftSqlTool",
      "typeVersion": 1.1,
      "position": [
        -400,
        2240
      ],
      "id": "b4b2afd0-ef21-4633-bc75-946e55e37069",
      "name": "Microsoft SQL3",
      "credentials": {
        "microsoftSql": {
          "id": "uuLVAMULLxXInMtK",
          "name": "Atos Capital"
        }
      }
    },
    {
      "parameters": {
        "resource": "messages-api",
        "operation": "send-document",
        "instanceName": "=atoscapital",
        "remoteJid": "={{ $('If1').item.json.numero }}\n",
        "media": "={{ $json.url }}",
        "caption": "Segue relatório conforme solicitado:",
        "fileName": "=Relatorio emitido em {{ new Date().toLocaleDateString('pt-BR', { timeZone: 'America/Sao_Paulo' }) }}.pdf",
        "options_message": {}
      },
      "type": "n8n-nodes-evolution-api.evolutionApi",
      "typeVersion": 1,
      "position": [
        220,
        2040
      ],
      "id": "cc356773-f128-4ad0-8a9d-93883997c94f",
      "name": "Enviar Resposta Pergunta5",
      "credentials": {
        "evolutionApi": {
          "id": "19NxyORpzpOmLGmT",
          "name": "Evolution API"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "jsCode": "return [{\n  json: {\n    html: `\n    <html>\n    <head>\n      <style>\n        table {\n          width: 100%;\n          border-collapse: collapse;\n        }\n        th, td {\n          border: 1px solid #000;\n          padding: 8px;\n          font-size: 12px;\n        }\n        th {\n          background-color: #e0e0e0;\n        }\n        h2 {\n          text-align: center;\n        }\n      </style>\n    </head>\n    <body>\n      <h2>Relatório de Vendas emitido em - ${new Date().toLocaleDateString('pt-BR', { timeZone: 'America/Sao_Paulo' })}</h2>\n<h4 style=\"text-align: center; width: 100%;\">Relatório referente às vendas do dia -  ${$('Microsoft SQL5').item.json.ultima_data_venda}</h4>\n\n\n      <table>\n        <thead>\n          <tr>\n            <th>FILIAL</th>\n            <th>VENDAS 2024</th>\n            <th>META MÊS</th>\n            <th>PREVISÃO</th>\n            <th>ACUM. 2024</th>\n            <th>ACUM. META</th>\n            <th>ACUM. VENDAS</th>\n            <th>VENDAS DO DIA</th>\n            <th>CRESC. 2025</th>\n            <th>CRESC META</th>\n          </tr>\n        </thead>\n        <tbody>\n          ${$json[\"output\"].split(\"\\n\").slice(2).map(row => {\n            const cols = row.split(\"|\").map(c => c.trim());\n            if (cols.length === 10) {\n              return `<tr>${cols.map(c => `<td>${c}</td>`).join('')}</tr>`;\n            }\n            return '';\n          }).join('')}\n        </tbody>\n      </table>\n    </body>\n    </html>`\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -160,
        2040
      ],
      "id": "dce34ca3-9760-42df-9be1-4db8d234f552",
      "name": "Converter1"
    },
    {
      "parameters": {
        "operation": "URL/HTML to PDF",
        "convertType": "htmlToPDF",
        "html": "={{ $json.html }}",
        "advancedOptions": {
          "orientation": "landscape",
          "paperSize": "a4"
        }
      },
      "type": "n8n-nodes-pdfco.PDFco Api",
      "typeVersion": 1,
      "position": [
        40,
        2040
      ],
      "id": "2edc4945-d480-44bb-a773-46d62ddcbd69",
      "name": "PDFco Api",
      "credentials": {
        "pdfcoApi": {
          "id": "O4EzIAL3I0TSyBzc",
          "name": "PDF.co account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT CONVERT(VARCHAR, MAX(dtVenda), 103) AS ultima_data_venda FROM tbVendasDashboard WHERE vlVenda IS NOT NULL;"
      },
      "type": "n8n-nodes-base.microsoftSql",
      "typeVersion": 1.1,
      "position": [
        -1800,
        1160
      ],
      "id": "1f94b6b9-3eb8-4598-85ff-81ce0cb1dc0c",
      "name": "Microsoft SQL4",
      "credentials": {
        "microsoftSql": {
          "id": "uuLVAMULLxXInMtK",
          "name": "Atos Capital"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT CONVERT(VARCHAR, MAX(dtVenda), 103) AS ultima_data_venda FROM tbVendasDashboard WHERE vlVenda IS NOT NULL;"
      },
      "type": "n8n-nodes-base.microsoftSql",
      "typeVersion": 1.1,
      "position": [
        -1320,
        1900
      ],
      "id": "8cfd09e5-3e41-4504-8eea-d3e15f252ee9",
      "name": "Microsoft SQL5",
      "credentials": {
        "microsoftSql": {
          "id": "uuLVAMULLxXInMtK",
          "name": "Atos Capital"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "b92aae35-cfd8-4661-bbc7-55fff9c56d21",
              "leftValue": "={{ $('Numeros Autorizados1').item.json.pergunta }}",
              "rightValue": "texto",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "e170a3df-4b62-4349-b1c5-8298dd37c34e",
              "leftValue": "={{ $('Numeros Autorizados1').item.json.pergunta }}",
              "rightValue": "mensagem",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "cf2e3f6d-9f1f-4d55-87b2-0120e5e996b8",
              "leftValue": "={{ $('Numeros Autorizados1').item.json.pergunta }}",
              "rightValue": "escrito",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "or"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1240,
        2680
      ],
      "id": "da801475-cd08-4ce5-b4b5-e3db17d9cbcc",
      "name": "If4"
    },
    {
      "parameters": {
        "model": "meta-llama/llama-4-maverick-17b-128e-instruct",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        -2620,
        1520
      ],
      "id": "0fda8fe1-6d5e-4f53-acfe-db28aeeccda2",
      "name": "Groq Chat Model9",
      "credentials": {
        "groqApi": {
          "id": "RXND1Dx3PYmWh1eD",
          "name": "GROQ"
        }
      }
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "b92aae35-cfd8-4661-bbc7-55fff9c56d21",
              "leftValue": "={{ $json.output }}",
              "rightValue": "Envie uma pergunta valida",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            },
            {
              "id": "33b93f73-240e-467e-9819-2e9f8a5935ef",
              "leftValue": "={{ $json.output }}",
              "rightValue": "Bom Dia",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "498dccd7-6117-4860-a337-a3740c2f70fb",
              "leftValue": "={{ $json.output }}",
              "rightValue": "Boa Tarde",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "daefa2a5-44b6-4c3a-8cf1-52b436000c46",
              "leftValue": "={{ $json.output }}",
              "rightValue": "Boa Noite",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "1ba184be-fa3e-4136-ab90-16bc3eee4b2f",
              "leftValue": "={{ $json.output }}",
              "rightValue": "Por Nada",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "68c0fafa-3ac6-4c31-9255-fc2f2db065db",
              "leftValue": "={{ $json.output }}",
              "rightValue": "boa noite",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "948347a6-1ed4-4fcd-a7f2-c692c5f9c356",
              "leftValue": "={{ $json.output }}",
              "rightValue": "bom dia",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "afb27ca7-fe3b-47d7-8bad-cf69eee37b50",
              "leftValue": "={{ $json.output }}",
              "rightValue": "boa tarde",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "dbe59f6c-2ca5-41c9-bfa6-958ae93b05a5",
              "leftValue": "={{ $json.output }}",
              "rightValue": "assistente",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "5c88748e-5f04-42aa-a925-466daaaff251",
              "leftValue": "={{ $json.output }}",
              "rightValue": "Assistente",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "or"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -2320,
        1360
      ],
      "id": "b192ef9f-5757-488f-b66c-edd0fed0a0b5",
      "name": "If5"
    },
    {
      "parameters": {
        "resource": "messages-api",
        "instanceName": "=atoscapital",
        "remoteJid": "={{ $('Numeros Autorizados').item.json.numero }}",
        "messageText": "={{ $json.output }}",
        "options_message": {
          "delay": 300
        }
      },
      "type": "n8n-nodes-evolution-api.evolutionApi",
      "typeVersion": 1,
      "position": [
        -2140,
        1200
      ],
      "id": "f5e729d9-7129-4b2a-8da3-0f3f85362f86",
      "name": "Enviar Resposta Pergunta3",
      "credentials": {
        "evolutionApi": {
          "id": "19NxyORpzpOmLGmT",
          "name": "Evolution API"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "model": "meta-llama/llama-4-maverick-17b-128e-instruct",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        -2060,
        2220
      ],
      "id": "effa56d7-9c3a-4d8e-8a3c-a7038b6672d8",
      "name": "Groq Chat Model10",
      "credentials": {
        "groqApi": {
          "id": "RXND1Dx3PYmWh1eD",
          "name": "GROQ"
        }
      }
    },
    {
      "parameters": {
        "promptType": "=define",
        "text": "={{ $('Numeros Autorizados1').item.json.pergunta }}",
        "options": {
          "systemMessage": "=1. Se você receber bom dia, boa tarde, ou boa noite envie \"O que recebeu ( Bom Dia, Boa Tarde ou Boa Noite) + , se quiser fazer alguma pergunta estou disponível\"\n2. Se receber algo relacionado a seu nome como \"qual seu nome\", ou \"quem é você\", \"por que theo\", \"por que seu nome é theo\", \"Qual é seu nome\" responda \"Sou a Assistente virtual da Atos Capital\"\n3. Se receber obrigado responda \"Por Nada, se precisar fazer alguma pergunta pode falar\"\n4. Seja rápido\n5. Se receber algo com a palavra relatório so responda \"Relatorio\"\n6. Se receber a palavra Perfeito envie \"Envie uma pergunta valida\"\n7. Se receber uma pergunta que não tem relação com \"vendas, valores, filiais, metas, previsões, quanto eu vendi, qual a maior venda, qual filial mais vendeu, quanto vendi no total, qual a quantidade de filiais, qual filial bati a meta, qual a meta, qual a previsão, qual o crescimento 2025, qual crescimento meta, qual a maior, qual a menor, e a maior, e a menor, em qual dia, qual dia, e o dia, em que dia e perguntas relacionadas\" você deve envie \"true\", caso tenha relação com algo que mencionei envie \"false\"\n8. Se você receber uma única palavra ou emoji envie \"Envie uma pergunta valida\"\n9. Se receber qualquer coisa que não formule ou tenha relação com perguntas relacionadas a vendas, valores, filiais, metas, previsões, crescimento, filial que mais vendeu, quanto vendeu etc envie \"Envie uma pergunta valida\"\n10. Se receber uma frase que não tem relação com vendas, valores, filiais, metas, previsões você deve envie \"Envie uma pergunta valida\"\n11. Qualquer outra coisa envie \"false\""
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        -2220,
        2000
      ],
      "id": "7b901cee-db1d-4f6d-9924-c11c6cc01ee9",
      "name": "Pergunta Valida 1"
    },
    {
      "parameters": {
        "promptType": "=define",
        "text": "={{ $('Numeros Autorizados').item.json.pergunta }}",
        "options": {
          "systemMessage": "=1. Se você receber bom dia, boa tarde, ou boa noite envie \"O que recebeu ( Bom Dia, Boa Tarde ou Boa Noite) + , se quiser fazer alguma pergunta estou disponível\"\n2. Se receber algo relacionado a seu nome como \"qual seu nome\", ou \"quem é você\", \"por que theo\", \"por que seu nome é theo\", \"Qual é seu nome\" responda \"Sou a Assistente virtual da Atos Capital\"\n3. Se receber obrigado responda \"Por Nada, se precisar fazer alguma pergunta pode falar\"\n4. Seja rápido\n5. Se receber algo com a palavra relatório so responda \"Relatorio\"\n6. Se receber a palavra Perfeito envie \"Envie uma pergunta valida\"\n7. Se receber uma pergunta que não tem relação com \"vendas, valores, filiais, metas, previsões, quanto eu vendi, qual a maior venda, qual filial mais vendeu, quanto vendi no total, qual a quantidade de filiais, qual filial bati a meta, qual a meta, qual a previsão, qual o crescimento 2025, qual crescimento meta, qual a maior, qual a menor, e a maior, e a menor, em qual dia, qual dia, e o dia, em que dia e perguntas relacionadas\" você deve envie \"true\", caso tenha relação com algo que mencionei envie \"false\"\n8. Se você receber uma única palavra ou emoji envie \"Envie uma pergunta valida\"\n9. Se receber qualquer coisa que não formule ou tenha relação com perguntas relacionadas a vendas, valores, filiais, metas, previsões, crescimento, filial que mais vendeu, quanto vendeu etc envie \"Envie uma pergunta valida\"\n10. Se receber uma frase que não tem relação com vendas, valores, filiais, metas, previsões você deve envie \"Envie uma pergunta valida\"\n11. Qualquer outra coisa envie \"false\""
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        -2640,
        1360
      ],
      "id": "2029a56f-ae43-48eb-ba16-6b398f8ca243",
      "name": "Pergunta Valida"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "b92aae35-cfd8-4661-bbc7-55fff9c56d21",
              "leftValue": "={{ $json.body.sender }}",
              "rightValue": "whatsapp",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "and"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -4360,
        2020
      ],
      "id": "66875bcf-05b9-408f-a115-a33d840abee7",
      "name": "If10"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "{{ $json.output }}"
      },
      "type": "n8n-nodes-base.microsoftSqlTool",
      "typeVersion": 1.1,
      "position": [
        -3000,
        3060
      ],
      "id": "396fcbe9-205b-4b2d-aba0-0eb4c98ffe6b",
      "name": "Microsoft SQL7",
      "credentials": {
        "microsoftSql": {
          "id": "uuLVAMULLxXInMtK",
          "name": "Atos Capital"
        }
      }
    },
    {
      "parameters": {
        "model": "meta-llama/llama-4-maverick-17b-128e-instruct",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        -3240,
        3100
      ],
      "id": "d7a732e3-e4d5-4556-98e8-6790a714de5a",
      "name": "Groq Chat Model14",
      "credentials": {
        "groqApi": {
          "id": "RXND1Dx3PYmWh1eD",
          "name": "GROQ"
        }
      }
    },
    {
      "parameters": {
        "model": "meta-llama/llama-4-maverick-17b-128e-instruct",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        -3180,
        3060
      ],
      "id": "b5ff07ba-6785-4167-a203-15ebc37ba77b",
      "name": "Groq Chat Model15",
      "credentials": {
        "groqApi": {
          "id": "RXND1Dx3PYmWh1eD",
          "name": "GROQ"
        }
      }
    },
    {
      "parameters": {
        "promptType": "=define",
        "text": "={{ $('Pegar Mensagem').item.json.body.pergunta }}",
        "options": {
          "systemMessage": "=ENVIAR COMO RESPOSTA APENAS O SQL e sem uso de crases, em nomes de filial se atentar aos acentos necessários para o nome Real da cidade A data atual é {{ new Date().toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' }) }}, , Você é uma IA que deve interepretar a pergunta que o usuário está fazendo antes de fazer a consulta no banco, e faça um select personalizado para somente pesquisar o necessário para responder essa pergunta e não consultar o banco de dados completo, antes de gerar o sql veja os exemplos abaixo para se basear, alguns estão pré prontos. Para busca de informações de filial em nmFilial , NÂO UTILIZAR CRASES no SQL. Se eu fizer uma pergunta sobre previsão ou meta e não especificar o mês considere o mês e ano atual de {{ new Date().toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' }) }}, adicionar o nome \"Filial\" antes do nome da filial, minhas colunas do banco são idVendas, nrCNPJ, nmFilial, dtVenda, vlVenda vou enviar alguns exemplos enumerados abaixo:\n\n1. Se receber a palavra Perfeito retorne \"Envie uma pergunta valida\", Se pedir o link do dashboard você deve enviar \"https://atoscapital.streamlit.app/\"\n\n2. Se receber uma pergunta que não tem relação de perguntas com vendas, valores, filiais, metas, previsões você deve retornar \"Não posso responder sobre isso\"\n\n4. Se você receber uma única palavra ou emoji responder \"Envie uma pergunta valida\"\n\n5. Se eu pergunto quantas filiais tenho o sql seria: SELECT COUNT(DISTINCT nmFilial) AS totalFiliais FROM tbVendasDashboard;,\n\n6. Se eu pergunto sobre o acumulado 2024 de uma filial por exemplo qual o acumulado 2024 da filial são paulo o sql seria: SELECT SUM(vlVenda) AS acumulado_vendas_maio_2024 FROM tbVendasDashboard WHERE nmFilial = 'Filial São Paulo' AND YEAR(dtVenda) = 2024 AND MONTH(dtVenda) = 5 AND DAY(dtVenda) IN (SELECT DISTINCT DAY(dtVenda) FROM tbVendasDashboard WHERE nmFilial = 'Filial São Paulo' AND YEAR(dtVenda) = 2025 AND MONTH(dtVenda) = 5 AND vlVenda > 0);\n\n7. Se eu pergunto sobre a previsão de São Paulo em maio de 2025 no sql seria:SELECT CAST((SUM(vlVenda) / COUNT(DISTINCT CAST(dtVenda AS DATE))) * 31 AS DECIMAL(10, 2)) AS previsao_vendas_maio FROM tbVendasDashboard WHERE nmFilial = 'São Paulo' AND YEAR(dtVenda) = 2025 AND MONTH(dtVenda) = 5 AND vlVenda > 0;, \n\n8. Se eu pergunto sobre o acumulado meta da filial Salvador em maio o sql seria: SELECT SUM(vlVenda) * 1.05 AS acumulado_vendas_maio_2024_com_5_porcento FROM tbVendasDashboard WHERE nmFilial = 'Salvador' AND YEAR(dtVenda) = 2024 AND MONTH(dtVenda) = 5 AND DAY(dtVenda) IN (SELECT DISTINCT DAY(dtVenda) FROM tbVendasDashboard WHERE nmFilial = 'Salvador' AND YEAR(dtVenda) = 2025 AND MONTH(dtVenda) = 5 AND vlVenda > 0);\n\n9.Se eu pergunto o acumulado vendas de São Paulo em maio de 2025 o sql seria: SELECT SUM(vlVenda) AS total_vendido_maio_2025 FROM tbVendasDashboard WHERE nmFilial = 'Filial São Paulo' AND YEAR(dtVenda) = 2025 AND MONTH(dtVenda) = 5 AND vlVenda > 0;\n\n10. Se no dia 3-5-25 eu pergunto sobre crescimento meta de maio em São paulo o sql seria: SELECT CAST(ROUND(((SELECT SUM(vlVenda) FROM tbVendasDashboard WHERE nmFilial = 'São Paulo' AND YEAR(dtVenda) = 2025 AND MONTH(dtVenda) = 5 AND vlVenda > 0) / (SELECT SUM(vlVenda) * 1.05 FROM tbVendasDashboard WHERE nmFilial = 'São Paulo' AND YEAR(dtVenda) = 2024 AND MONTH(dtVenda) = 5 AND DAY(dtVenda) IN (SELECT DISTINCT DAY(dtVenda) FROM tbVendasDashboard WHERE nmFilial = 'São Paulo' AND YEAR(dtVenda) = 2025 AND MONTH(dtVenda) = 5 AND vlVenda > 0))) * 100 - 100, 2) AS VARCHAR) + '%' AS resultado_percentual;,\n\n11. Se em 3-5-25 eu pergunto o crescimento de maio de 2025 em São Paulo o sql seria: SELECT CASE WHEN (t2025.total2025 - t2024.total2024) >= 0 THEN '+' + CAST(ROUND(((t2025.total2025 / t2024.total2024) - 1) * 100.0, 2) AS VARCHAR) + '%' ELSE '-' + CAST(ROUND((1 - (t2025.total2025 / t2024.total2024)) * 100.0, 2) AS VARCHAR) + '%' END AS crescimento_percentual FROM (SELECT SUM(vlVenda) AS total2025 FROM tbVendasDashboard WHERE nmFilial = 'São Paulo' AND YEAR(dtVenda) = 2025 AND MONTH(dtVenda) = 5 AND DAY(dtVenda) <= 4 AND vlVenda > 0) AS t2025, (SELECT SUM(vlVenda) AS total2024 FROM tbVendasDashboard WHERE nmFilial = 'São Paulo' AND YEAR(dtVenda) = 2024 AND MONTH(dtVenda) = 5 AND DAY(dtVenda) IN (SELECT DISTINCT DAY(dtVenda) FROM tbVendasDashboard WHERE nmFilial = 'São Paulo' AND YEAR(dtVenda) = 2025 AND MONTH(dtVenda) = 5 AND DAY(dtVenda) <= 4 AND vlVenda > 0)) AS t2024;\n\n12. Se eu pergunto quanto vendi na filial salvador no dia 15 de maio de 2025 o sql seria: SELECT vlVenda FROM tbVendasDashboard WHERE nmFilial = 'Filial Salvador' AND dtVenda = '2025-05-15';,\n\n13. Se eu pergunto quais filiais eu tenho o sql seria: SELECT DISTINCT nmFilial AS nmFilial FROM tbVendasDashboard ORDER BY nmFilial;. \n\n14. Se eu pergunto qual filial minha mais vendeu em janeiro de 2025 o sql seria esse: SELECT TOP 1 nmFilial, SUM(vlVenda) AS total_vendas FROM tbVendasDashboard WHERE YEAR(dtVenda) = 2025 AND MONTH(dtVenda) = 1 GROUP BY nmFilial ORDER BY total_vendas DESC;,\n\n15. Se eu pergunto qual filial minha mais vendeu o sql seria esse: SELECT TOP 1 nmFilial, SUM(vlVenda) AS total_vendas FROM tbVendasDashboard GROUP BY nmFilial ORDER BY total_vendas DESC;, \n\n16. Se a pergunta for Qual a media de vendas dos ultimos 10 dias de fevereiro de 2025 na filial São Paulo o sql seria: SELECT AVG(vlVenda) AS media_vendas FROM tbVendasDashboard WHERE nmFilial = 'Filial São Paulo' AND dtVenda BETWEEN '2025-02-19' AND '2025-02-28';\n\n17. Se eu pergunto Qual minha filial mais vendeu no mês de abril de 2024 e no mês de abril de 2025 o sql seria: SELECT anoMes, nmFilial, total_vendas FROM (SELECT YEAR(dtVenda)*100 + MONTH(dtVenda) AS anoMes, nmFilial, SUM(vlVenda) AS total_vendas, RANK() OVER (PARTITION BY YEAR(dtVenda)*100 + MONTH(dtVenda) ORDER BY SUM(vlVenda) DESC) AS rk FROM tbVendasDashboard WHERE (YEAR(dtVenda) = 2024 AND MONTH(dtVenda) = 4) OR (YEAR(dtVenda) = 2025 AND MONTH(dtVenda) = 4) GROUP BY YEAR(dtVenda)*100 + MONTH(dtVenda), nmFilial) AS t WHERE rk = 1;\n\n18. Se eu pergunto qual a meta de vendas da filial salvador em maio de 2025 o sql seria: SELECT SUM(vlVenda) * 1.05 AS metaMaio2025 FROM tbVendasDashboard WHERE nmFilial = 'Salvador' AND MONTH(dtVenda) = 5 AND YEAR(dtVenda) = 2024;\n\n19. Se eu pergunto Quais filiais bateram a meta em abril de 2025 o sql seria: SELECT v2025.nmFilial FROM (SELECT nmFilial, SUM(vlVenda) AS vendas2025 FROM tbVendasDashboard WHERE MONTH(dtVenda) = 4 AND YEAR(dtVenda) = 2025 GROUP BY nmFilial) v2025 INNER JOIN (SELECT nmFilial, SUM(vlVenda) * 1.05 AS meta2025 FROM tbVendasDashboard WHERE MONTH(dtVenda) = 4 AND YEAR(dtVenda) = 2024 GROUP BY nmFilial) m2025 ON v2025.nmFilial = m2025.nmFilial WHERE v2025.vendas2025 >= m2025.meta2025;,\n\n20. Se eu pergunto quanto eu vendi na filial são paulo em abril de 2025 o sql seria: SELECT SUM(vlVenda) AS vendasAbril2025 FROM tbVendasDashboard WHERE nmFilial = 'São Paulo' AND YEAR(dtVenda) = 2025 AND MONTH(dtVenda) = 4;,\n\n21. Se eu pergunto a previsão de um mês que ja passou por exemplo eu estou em maio de 2025 e pergunto a meta de março de 2025 o sql seria: SELECT SUM(vlVenda) AS previsao_vendas FROM tbVendasDashboard WHERE nmFilial = 'nome_filial' AND YEAR(dtVenda) = 2025 AND MONTH(dtVenda) = 3;,\n\n22. Se eu pergunto qual a maior venda da filial São Paulo o sql seria esse: SELECT MAX(vlVenda) AS maior_venda FROM tbVendasDashboard WHERE nmFilial = 'Filial São Paulo';,\n\n23. Se eu pergunto qual a ultima venda de Belém o sql seria: SELECT TOP 1 dtVenda, vlVenda FROM tbVendasDashboard WHERE nmFilial = 'Belém' AND vlVenda IS NOT NULL ORDER BY dtVenda DESC;\n\n24. Se eu pergunto Quero valor das últimas venda de todas as filiais o sql seria: SELECT nmFilial, dtVenda, vlVenda FROM tbVendasDashboard t1 WHERE dtVenda = (SELECT MAX(dtVenda) FROM tbVendasDashboard t2 WHERE t2.nmFilial = t1.nmFilial AND vlVenda IS NOT NULL) AND vlVenda IS NOT NULL ORDER BY nmFilial;\n\n25. Se eu pergunto o total do Rio de Janeiro esse ano o sql seria: \"SELECT SUM(vlVenda) AS total_vendido_ano_2025 FROM tbVendasDashboard WHERE nmFilial = 'Filial Rio de Janeiro' AND YEAR(dtVenda) = 2025 AND dtVenda <= (SELECT MAX(dtVenda) FROM tbVendasDashboard WHERE YEAR(dtVenda) = 2025 AND nmFilial = 'Filial Rio de Janeiro');\"\n\n26 Se eu pergunto se São Paulo já teve vendas em junho o sql seria: SELECT dtVenda, vlVenda FROM tbVendasDashboard WHERE nmFilial = 'São Paulo' AND MONTH(dtVenda) = 6 AND YEAR(dtVenda) = 2025 AND dtVenda <= CONVERT(DATE, GETDATE()) AND vlVenda IS NOT NULL;\n\n27. Se eu pergunto Qual minha ultima venda de cada filial o sql seria: SELECT nmFilial, dtVenda, vlVenda FROM tbVendasDashboard t1 WHERE dtVenda = (SELECT MAX(dtVenda) FROM tbVendasDashboard t2 WHERE t2.nmFilial = t1.nmFilial AND vlVenda IS NOT NULL) AND vlVenda IS NOT NULL ORDER BY nmFilial ASC;\n\n28. Se eu pergunto Qual a maior venda de cada filial o sql seria: SELECT nmFilial, dtVenda, vlVenda FROM tbVendasDashboard t1 WHERE vlVenda = (SELECT MAX(vlVenda) FROM tbVendasDashboard t2 WHERE t2.nmFilial = t1.nmFilial AND vlVenda IS NOT NULL) AND vlVenda IS NOT NULL ORDER BY nmFilial ASC;\n\n\n29. O dia atual é {{ new Date().toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' }) }}\n\n\nResponder somente com o sql correto lembrando que eu uso SQL SERVER anterior a 2012, sem aspas crases ou chaves\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        -3520,
        2900
      ],
      "id": "de0cbc39-4cf9-4141-a500-5ff9b8ab4c66",
      "name": "Transformar em SQL8"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.output }}",
        "options": {
          "systemMessage": "=Siga todas as regras abaixo enumeradas:\n\n1. Seja o mais rápido possivel\n2. A data de hoje é {{ new Date().toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' }) }}, \n3. Se a pergunta for sobre o link do dashboard e vinher \"https://atoscapital.streamlit.app/\" você não deve fazer nenhuma consulta no banco de dados, deve apenas enviar esse link\n4. Você deve pegar o sql que vem do nó Transformar em SQL e executar no banco e enviar somente a resposta do banco de dados sem enviar nada de código sql enviar somente a resposta mesmo e não enviar nenhum nome de coluna do banco de dados, responder sempre em Pt-Br,\n5. datas responder no padrão brasileiro, e quando preciso usar moedas usar o real brasileiro com \".\" para separar os milhares e \",\" para os decimais \n6. Se a mensagem que você recebeu for uma palavra \"Envie uma pergunta valida\",\n7. Se receber a palavra Perfeito retorne \"Envie uma pergunta valida\" \n8. Se no banco não tiver a resposta responder \"Não possuo conhecimento sobre isso\", \n9. Se der erro na banco responda \"Tive um erro no processamento, faça a pergunta novamente\".\n10. se algum valor vinher NULL do banco responder \"Não tenho vendas cadastradas para esse dia\". \n11. Quanto ultrapassar o nível de tokens da api responder \"Pergunta ultrapassa o nível de tokens permitidos\"\n12. Não enviar nada em Inglês em hipotese alguma\n13. Antes de valores de dinheiro sempre enviar antes o R$\n14. Sempre que pedir para listar, detalhar, ou com detalhes enviar dados com quebra de linhas bonitos esteticamente e não tudo em linha única\n15. Se ultrapassar o limite de tokens responda \"Limite de tokens ultrapassado\"\n16. Você sempre deve contextualizar um pouco exemplo na resposta, nunca envie somente o resultado: Se a pergunta é sobre maior venda você deve responder \"A maior venda foi e o valor\", se a pergunta é sobre quantidade de filial você responde \"A quantidade de filial é e a quantidade\" Se a pergunta e sobre qual filial mais vendeu você responde \"A filial que mais vendeu é e o nome da filial e quanto ela vendeu, e va seguindo esses exemplos e adaptando a pergunta\"\n17. Se a pergunta envolve data como \"Quanto vendi do dia 1 ao dia 4 em SP\", \"Qual a maior venda de SP\" essas coisas assim além do nome da filial e valor enviar a data tambem\n18. Se tiver qualquer erro responda \"Tive um erro, faça a pergunta novamente\""
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        -3200,
        2900
      ],
      "id": "e43aef79-7b78-4e85-887d-f8a28d211856",
      "name": "Puxar no Banco3"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.2,
      "position": [
        -2880,
        2900
      ],
      "id": "d5f69ce7-a551-4652-9a75-9255947558f5",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "b92aae35-cfd8-4661-bbc7-55fff9c56d21",
              "leftValue": "={{ $('Pegar Mensagem').item.json.body.pergunta }}",
              "rightValue": "relatorio",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "d3ed3590-687d-4729-9749-eb54d1ad46d8",
              "leftValue": "={{ $('Pegar Mensagem').item.json.body.pergunta }}",
              "rightValue": "relatório",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "a9c2cd3f-84ce-49ea-a16f-0a5d8c8671f5",
              "leftValue": "={{ $('Pegar Mensagem').item.json.body.pergunta }}",
              "rightValue": "Relatorio",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "7359d239-ac6f-4ae5-a907-3fb99adacdcc",
              "leftValue": "={{ $('Pegar Mensagem').item.json.body.pergunta }}",
              "rightValue": "Relatório",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "or"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -3760,
        2300
      ],
      "id": "65b9e255-12e4-438c-a9e3-aa3b8c3ddf90",
      "name": "If11"
    },
    {
      "parameters": {
        "promptType": "=define",
        "text": "={{ $('Pegar Mensagem').item.json.body.pergunta }}",
        "options": {
          "systemMessage": "=Você é um agente de IA e quando consultado você deve executar o sql a seguir e deve enviar como resposta somente os títulos e os resultados e enviar em formato tudo alinhado cada titulo em uma coluna estilo excel e logo abaixo os resultados com um em cada linha. Quero que envie tudo certo e formatado com quebra de linhas e tudo bem organizadinho. Você deve enviar os valores no padrão de moeda Real Brasileiro R$ usando \".\" para milhares e \",\" para decimais\n\n Titulos: \"FILIAL\", \"VENDAS 2024\", \"META MÊS\",\"PREVISÃO\", \"ACUM. 2024\", \"ACUM. META\", \"ACUM. VENDAS\", \"VENDAS DO DIA\", \"CRESC. 2025\",\"CRESC META\"\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        -2820,
        2620
      ],
      "id": "af2b9618-dd98-477b-84e0-2b9a72d93c3d",
      "name": "Transformar em SQL11"
    },
    {
      "parameters": {
        "model": "meta-llama/llama-4-maverick-17b-128e-instruct",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        -2820,
        2780
      ],
      "id": "f6429306-cb52-4ab5-a898-065556f49b3d",
      "name": "Groq Chat Model18",
      "credentials": {
        "groqApi": {
          "id": "RXND1Dx3PYmWh1eD",
          "name": "GROQ"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "DECLARE @data_inicio DATE = CASE WHEN DAY(GETDATE()) = 1 \n                              THEN DATEADD(MONTH, -1, CAST(CONVERT(VARCHAR(6), YEAR(GETDATE())) + RIGHT('0' + CONVERT(VARCHAR(2), MONTH(GETDATE())), 2) + '01' AS DATE)) \n                              ELSE CAST(CONVERT(VARCHAR(6), YEAR(GETDATE())) + RIGHT('0' + CONVERT(VARCHAR(2), MONTH(GETDATE())), 2) + '01' AS DATE) \n                         END; \n\nWITH MaxDatas AS ( \n    SELECT nmFilial, MAX(dtVenda) AS max_dtVenda \n    FROM tbVendasDashboard \n    WHERE dtVenda >= @data_inicio AND dtVenda < CAST(GETDATE() AS DATE) AND vlVenda IS NOT NULL \n    GROUP BY nmFilial \n), \nPrevisao AS ( \n    SELECT v.nmFilial, \n           'R$ ' + REPLACE(REPLACE(CONVERT(VARCHAR, CAST(SUM(v.vlVenda) / NULLIF(COUNT(DISTINCT CONVERT(VARCHAR, v.dtVenda, 112)), 0) * \n                  DAY(DATEADD(DAY, -1, DATEADD(MONTH, 1, @data_inicio))) AS MONEY), 1), '.', ','), ',', '.') AS previsao_vendas \n    FROM tbVendasDashboard v \n    INNER JOIN MaxDatas md ON v.nmFilial = md.nmFilial \n    WHERE v.dtVenda >= @data_inicio AND v.dtVenda <= md.max_dtVenda AND v.vlVenda IS NOT NULL \n    GROUP BY v.nmFilial \n), \nDiasValidos AS ( \n    SELECT DISTINCT DAY(dtVenda) AS dia, nmFilial \n    FROM tbVendasDashboard \n    WHERE MONTH(dtVenda) = MONTH(GETDATE()) AND YEAR(dtVenda) = YEAR(GETDATE()) AND dtVenda <= GETDATE() AND vlVenda IS NOT NULL \n), \nAcumuloAnoAnterior AS ( \n    SELECT nmFilial, vlVenda, DAY(dtVenda) AS dia \n    FROM tbVendasDashboard \n    WHERE MONTH(dtVenda) = MONTH(GETDATE()) AND YEAR(dtVenda) = YEAR(DATEADD(YEAR, -1, GETDATE())) AND vlVenda IS NOT NULL \n), \nAcumulo AS ( \n    SELECT d.nmFilial, \n           'R$ ' + REPLACE(REPLACE(CONVERT(VARCHAR, CAST(CASE WHEN DAY(GETDATE()) = 1 THEN ( \n               SELECT SUM(vlVenda) \n               FROM tbVendasDashboard t \n               WHERE MONTH(dtVenda) = MONTH(DATEADD(MONTH, -1, GETDATE())) \n               AND YEAR(dtVenda) = YEAR(DATEADD(YEAR, -1, GETDATE())) \n               AND vlVenda IS NOT NULL \n               AND t.nmFilial = d.nmFilial \n           ) ELSE SUM(a.vlVenda) END AS MONEY), 1), '.', ','), ',', '.') AS acumulo_2024 \n    FROM DiasValidos d \n    LEFT JOIN AcumuloAnoAnterior a ON a.dia = d.dia AND a.nmFilial = d.nmFilial \n    GROUP BY d.nmFilial \n), \nDiasValidos2 AS ( \n    SELECT DISTINCT DAY(dtVenda) AS dia \n    FROM dbo.tbVendasDashboard \n    WHERE MONTH(dtVenda) = MONTH(GETDATE()) AND YEAR(dtVenda) = YEAR(GETDATE()) AND dtVenda <= GETDATE() AND vlVenda IS NOT NULL \n), \nAcumuloAnoAnterior2 AS ( \n    SELECT nmFilial, vlVenda \n    FROM dbo.tbVendasDashboard \n    WHERE MONTH(dtVenda) = MONTH(GETDATE()) AND YEAR(dtVenda) = YEAR(DATEADD(YEAR, -1, GETDATE())) AND vlVenda IS NOT NULL AND DAY(dtVenda) IN (SELECT dia FROM DiasValidos2) \n), \nSomaAnoAnterior AS ( \n    SELECT nmFilial, SUM(vlVenda) AS soma_vlVenda \n    FROM AcumuloAnoAnterior2 \n    GROUP BY nmFilial \n), \nSomaUltimoMesAnoAnterior AS ( \n    SELECT nmFilial, SUM(vlVenda) AS soma_vlVenda \n    FROM dbo.tbVendasDashboard \n    WHERE MONTH(dtVenda) = MONTH(DATEADD(MONTH, -1, GETDATE())) AND YEAR(dtVenda) = YEAR(DATEADD(YEAR, -1, GETDATE())) AND vlVenda IS NOT NULL \n    GROUP BY nmFilial \n), \nAcumuloMeta AS ( \n    SELECT COALESCE(a.nmFilial, b.nmFilial) AS nmFilial, \n           'R$ ' + REPLACE(REPLACE(CONVERT(VARCHAR, CAST(CASE WHEN DAY(GETDATE()) = 1 THEN b.soma_vlVenda ELSE a.soma_vlVenda * 1.05 END AS MONEY), 1), '.', ','), ',', '.') AS acumulo_meta \n    FROM SomaAnoAnterior a \n    FULL OUTER JOIN SomaUltimoMesAnoAnterior b ON a.nmFilial = b.nmFilial \n), \nAcumuladoVendas AS ( \n    SELECT nmFilial, \n           'R$ ' + REPLACE(REPLACE(CONVERT(VARCHAR, CAST(SUM(vlVenda) AS MONEY), 1), '.', ','), ',', '.') AS acumulado_vendas \n    FROM tbVendasDashboard \n    WHERE YEAR(dtVenda) = CASE WHEN DAY(GETDATE()) = 1 THEN YEAR(DATEADD(MONTH, -1, GETDATE())) ELSE YEAR(GETDATE()) END \n    AND MONTH(dtVenda) = CASE WHEN DAY(GETDATE()) = 1 THEN MONTH(DATEADD(MONTH, -1, GETDATE())) ELSE MONTH(GETDATE()) END \n    GROUP BY nmFilial \n), \nUltimaVendaAtual AS ( \n    SELECT t1.nmFilial, \n           'R$ ' + REPLACE(REPLACE(CONVERT(VARCHAR, CAST(t1.vlVenda AS MONEY), 1), '.', ','), ',', '.') AS vlVenda \n    FROM tbVendasDashboard t1 \n    INNER JOIN ( \n        SELECT nmFilial, MAX(dtVenda) AS ultima_data \n        FROM tbVendasDashboard \n        WHERE vlVenda IS NOT NULL AND YEAR(dtVenda) = YEAR(GETDATE()) AND MONTH(dtVenda) <= MONTH(GETDATE()) \n        GROUP BY nmFilial \n    ) t2 ON t1.nmFilial = t2.nmFilial AND t1.dtVenda = t2.ultima_data \n), \nDiasValidosCresc AS ( \n    SELECT DISTINCT DAY(dtVenda) AS dia \n    FROM dbo.tbVendasDashboard \n    WHERE MONTH(dtVenda) = MONTH(GETDATE()) AND YEAR(dtVenda) = YEAR(GETDATE()) AND dtVenda <= GETDATE() AND vlVenda IS NOT NULL \n), \nAcumuloAnoAnteriorCresc AS ( \n    SELECT nmFilial, vlVenda \n    FROM dbo.tbVendasDashboard \n    WHERE MONTH(dtVenda) = MONTH(GETDATE()) AND YEAR(dtVenda) = YEAR(DATEADD(YEAR, -1, GETDATE())) AND vlVenda IS NOT NULL AND DAY(dtVenda) IN (SELECT dia FROM DiasValidosCresc) \n), \nVendasAnoAnterior AS ( \n    SELECT nmFilial, \n           CASE WHEN DAY(GETDATE()) = 1 THEN ( \n               SELECT SUM(vlVenda) \n               FROM dbo.tbVendasDashboard AS sub \n               WHERE MONTH(dtVenda) = MONTH(DATEADD(MONTH, -1, GETDATE())) \n               AND YEAR(dtVenda) = YEAR(DATEADD(YEAR, -1, GETDATE())) \n               AND vlVenda IS NOT NULL \n               AND sub.nmFilial = main.nmFilial \n           ) ELSE ( \n               SELECT SUM(vlVenda) \n               FROM AcumuloAnoAnteriorCresc AS a \n               WHERE a.nmFilial = main.nmFilial \n           ) END AS acumulo_ano_anterior \n    FROM (SELECT DISTINCT nmFilial FROM dbo.tbVendasDashboard) AS main \n), \nVendasAnoAtual AS ( \n    SELECT nmFilial, SUM(vlVenda) AS total_ano_atual \n    FROM dbo.tbVendasDashboard \n    WHERE YEAR(dtVenda) = CASE WHEN DAY(GETDATE()) = 1 THEN YEAR(DATEADD(MONTH, -1, GETDATE())) ELSE YEAR(GETDATE()) END \n    AND MONTH(dtVenda) = CASE WHEN DAY(GETDATE()) = 1 THEN MONTH(DATEADD(MONTH, -1, GETDATE())) ELSE MONTH(GETDATE()) END \n    AND DAY(dtVenda) BETWEEN 1 AND DAY(DATEADD(DAY, -1, GETDATE())) \n    GROUP BY nmFilial \n), \nCrescimento AS ( \n    SELECT a.nmFilial, \n           REPLACE(STR(ROUND(((a.total_ano_atual / NULLIF(b.acumulo_ano_anterior, 0)) - 1) * 100, 2), 10, 2), ' ', '') + '%' AS cresc_vs_ano_anterior \n    FROM VendasAnoAtual a \n    JOIN VendasAnoAnterior b ON a.nmFilial = b.nmFilial \n    WHERE b.acumulo_ano_anterior IS NOT NULL AND b.acumulo_ano_anterior <> 0 \n), \nDiasValidosMeta AS ( \n    SELECT DISTINCT DAY(dtVenda) AS dia \n    FROM dbo.tbVendasDashboard \n    WHERE MONTH(dtVenda) = MONTH(GETDATE()) AND YEAR(dtVenda) = YEAR(GETDATE()) AND dtVenda <= GETDATE() AND vlVenda IS NOT NULL \n), \nAcumuloAnoAnteriorMeta AS ( \n    SELECT nmFilial, vlVenda \n    FROM dbo.tbVendasDashboard \n    WHERE MONTH(dtVenda) = MONTH(GETDATE()) AND YEAR(dtVenda) = YEAR(DATEADD(YEAR, -1, GETDATE())) AND vlVenda IS NOT NULL AND DAY(dtVenda) IN (SELECT dia FROM DiasValidosMeta) \n), \nVendasAnoAnteriorMeta AS ( \n    SELECT f.nmFilial, \n           CASE WHEN DAY(GETDATE()) = 1 THEN ( \n               SELECT SUM(vlVenda) \n               FROM dbo.tbVendasDashboard AS t \n               WHERE MONTH(dtVenda) = MONTH(DATEADD(MONTH, -1, GETDATE())) \n               AND YEAR(dtVenda) = YEAR(DATEADD(YEAR, -1, GETDATE())) \n               AND vlVenda IS NOT NULL \n               AND t.nmFilial = f.nmFilial \n           ) ELSE ( \n               SELECT SUM(vlVenda) \n               FROM AcumuloAnoAnteriorMeta a \n               WHERE a.nmFilial = f.nmFilial \n           ) * 1.05 END AS acumulo_meta_ano_anterior \n    FROM (SELECT DISTINCT nmFilial FROM dbo.tbVendasDashboard) f \n), \nVendasAnoAtualMeta AS ( \n    SELECT nmFilial, SUM(vlVenda) AS total_ano_atual \n    FROM dbo.tbVendasDashboard \n    WHERE YEAR(dtVenda) = CASE WHEN DAY(GETDATE()) = 1 THEN YEAR(DATEADD(MONTH, -1, GETDATE())) ELSE YEAR(GETDATE()) END \n    AND MONTH(dtVenda) = CASE WHEN DAY(GETDATE()) = 1 THEN MONTH(DATEADD(MONTH, -1, GETDATE())) ELSE MONTH(GETDATE()) END \n    AND DAY(dtVenda) BETWEEN 1 AND DAY(DATEADD(DAY, -1, GETDATE())) \n    GROUP BY nmFilial \n), \nCrescimentoMeta AS ( \n    SELECT a.nmFilial, \n           REPLACE(STR(ROUND(((a.total_ano_atual / NULLIF(b.acumulo_meta_ano_anterior, 0)) - 1) * 100, 2), 10, 2), ' ', '') + '%' AS cresc_meta \n    FROM VendasAnoAtualMeta a \n    JOIN VendasAnoAnteriorMeta b ON a.nmFilial = b.nmFilial \n    WHERE b.acumulo_meta_ano_anterior IS NOT NULL AND b.acumulo_meta_ano_anterior <> 0 \n) \nSELECT f.nmFilial, \n       'R$ ' + REPLACE(REPLACE(CONVERT(VARCHAR, CAST(ISNULL(SUM(v.vlVenda), 0) AS MONEY), 1), '.', ','), ',', '.') AS vendas_2024, \n       'R$ ' + REPLACE(REPLACE(CONVERT(VARCHAR, CAST(ISNULL(SUM(v.vlVenda), 0) * 1.05 AS MONEY), 1), '.', ','), ',', '.') AS meta_mes, \n       ISNULL(p.previsao_vendas, 'R$ 0,00') AS previsao_vendas, \n       ISNULL(a.acumulo_2024, 'R$ 0,00') AS acumulo_2024, \n       ISNULL(am.acumulo_meta, 'R$ 0,00') AS acumulo_meta, \n       ISNULL(av.acumulado_vendas, 'R$ 0,00') AS acumulado_vendas, \n       ISNULL(u.vlVenda, 'R$ 0,00') AS ultima_venda_valor, \n       ISNULL(c.cresc_vs_ano_anterior, '0,00%') AS crescimento_vs_ano_anterior, \n       ISNULL(cm.cresc_meta, '0,00%') AS crescimento_vs_meta \nFROM (SELECT DISTINCT nmFilial FROM tbVendasDashboard) f \nLEFT JOIN tbVendasDashboard v ON f.nmFilial = v.nmFilial AND YEAR(v.dtVenda) = YEAR(DATEADD(YEAR, -1, GETDATE())) AND MONTH(v.dtVenda) = CASE WHEN DAY(GETDATE()) = 1 THEN MONTH(DATEADD(MONTH, -1, GETDATE())) ELSE MONTH(GETDATE()) END \nLEFT JOIN Previsao p ON f.nmFilial = p.nmFilial \nLEFT JOIN Acumulo a ON f.nmFilial = a.nmFilial \nLEFT JOIN AcumuloMeta am ON f.nmFilial = am.nmFilial \nLEFT JOIN AcumuladoVendas av ON f.nmFilial = av.nmFilial \nLEFT JOIN UltimaVendaAtual u ON f.nmFilial = u.nmFilial \nLEFT JOIN Crescimento c ON f.nmFilial = c.nmFilial \nLEFT JOIN CrescimentoMeta cm ON f.nmFilial = cm.nmFilial \nGROUP BY f.nmFilial, p.previsao_vendas, a.acumulo_2024, am.acumulo_meta, av.acumulado_vendas, u.vlVenda, c.cresc_vs_ano_anterior, cm.cresc_meta \nORDER BY f.nmFilial;"
      },
      "type": "n8n-nodes-base.microsoftSqlTool",
      "typeVersion": 1.1,
      "position": [
        -2660,
        2780
      ],
      "id": "fffd4807-dd40-448c-8e39-a61ada2d4d5e",
      "name": "Microsoft SQL10",
      "credentials": {
        "microsoftSql": {
          "id": "uuLVAMULLxXInMtK",
          "name": "Atos Capital"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "return [{\n  json: {\n    html: `\n    <html>\n    <head>\n      <style>\n        table {\n          width: 100%;\n          border-collapse: collapse;\n        }\n        th, td {\n          border: 1px solid #000;\n          padding: 8px;\n          font-size: 12px;\n        }\n        th {\n          background-color: #e0e0e0;\n        }\n        h2 {\n          text-align: center;\n        }\n      </style>\n    </head>\n    <body>\n      <h2>Relatório de Vendas emitido em - ${new Date().toLocaleDateString('pt-BR', { timeZone: 'America/Sao_Paulo' })}</h2>\n<h4 style=\"text-align: center; width: 100%;\">Relatório referente às vendas do dia -  ${$('Microsoft SQL11').item.json.ultima_data_venda}</h4>\n\n\n      <table>\n        <thead>\n          <tr>\n            <th>FILIAL</th>\n            <th>VENDAS 2024</th>\n            <th>META MÊS</th>\n            <th>PREVISÃO</th>\n            <th>ACUM. 2024</th>\n            <th>ACUM. META</th>\n            <th>ACUM. VENDAS</th>\n            <th>VENDAS DO DIA</th>\n            <th>CRESC. 2025</th>\n            <th>CRESC META</th>\n          </tr>\n        </thead>\n        <tbody>\n          ${$json[\"output\"].split(\"\\n\").slice(2).map(row => {\n            const cols = row.split(\"|\").map(c => c.trim());\n            if (cols.length === 10) {\n              return `<tr>${cols.map(c => `<td>${c}</td>`).join('')}</tr>`;\n            }\n            return '';\n          }).join('')}\n        </tbody>\n      </table>\n    </body>\n    </html>`\n  }\n}];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2500,
        2640
      ],
      "id": "7cb20eff-1396-469b-92b2-a8a3e4a11aa2",
      "name": "Converter3"
    },
    {
      "parameters": {
        "operation": "URL/HTML to PDF",
        "convertType": "htmlToPDF",
        "html": "={{ $json.html }}",
        "advancedOptions": {
          "name": "=Relatorio de Vendas{{ $('Microsoft SQL11').item.json.ultima_data_venda }}",
          "orientation": "landscape",
          "paperSize": "a4"
        }
      },
      "type": "n8n-nodes-pdfco.PDFco Api",
      "typeVersion": 1,
      "position": [
        -2320,
        2640
      ],
      "id": "eda4d363-722d-4fbf-952f-4245aa733f2e",
      "name": "PDFco Api3",
      "credentials": {
        "pdfcoApi": {
          "id": "O4EzIAL3I0TSyBzc",
          "name": "PDF.co account"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT CONVERT(VARCHAR, MAX(dtVenda), 103) AS ultima_data_venda FROM tbVendasDashboard WHERE vlVenda IS NOT NULL;"
      },
      "type": "n8n-nodes-base.microsoftSql",
      "typeVersion": 1.1,
      "position": [
        -3520,
        2520
      ],
      "id": "f47d7728-44c5-4059-877a-83913ec0887f",
      "name": "Microsoft SQL11",
      "credentials": {
        "microsoftSql": {
          "id": "uuLVAMULLxXInMtK",
          "name": "Atos Capital"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\"Link do PDF\": \"{{ $json.urlCorrigido }} \"}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.2,
      "position": [
        -1560,
        2600
      ],
      "id": "4121d16d-fc07-4ef9-854a-3f58cf807487",
      "name": "Respond to Webhook2"
    },
    {
      "parameters": {
        "jsCode": "// Passo 1: Pega a URL original\nlet rawUrl = $json.url;\n\n// Passo 2: Decodifica uma vez (para reverter %252F → %2F)\nlet partiallyDecoded = decodeURIComponent(rawUrl);\n\n// Passo 3: Corrige espaços mal colocados (como \"u s-west-2\" → \"us-west-2\")\npartiallyDecoded = partiallyDecoded.replace(/u s-west-2/g, 'us-west-2');\n\n// Passo 4: Re-encoda a URL completa de forma correta\nconst fixedUrl = encodeURI(partiallyDecoded.trim());\n\n// Retorna o link corrigido\nreturn [\n  {\n    json: {\n      urlCorrigido: fixedUrl\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -2140,
        2640
      ],
      "id": "f9f23e49-6b57-4643-9de0-711a3fe5687b",
      "name": "Converter4"
    },
    {
      "parameters": {
        "resource": "messages-api",
        "instanceName": "=atoscapital",
        "remoteJid": "={{ $('If').item.json.numero }}\n",
        "messageText": "={{ $('Puxar no Banco').item.json.output }}",
        "options_message": {
          "delay": 300
        }
      },
      "type": "n8n-nodes-evolution-api.evolutionApi",
      "typeVersion": 1,
      "position": [
        240,
        1460
      ],
      "id": "d1ff530e-9343-4dd9-aed3-2b07f5628499",
      "name": "Enviar Resposta Pergunta",
      "credentials": {
        "evolutionApi": {
          "id": "19NxyORpzpOmLGmT",
          "name": "Evolution API"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "{{ $json.output }}"
      },
      "type": "n8n-nodes-base.microsoftSqlTool",
      "typeVersion": 1.1,
      "position": [
        80,
        1620
      ],
      "id": "1e736d72-4e8d-4d1b-95bd-6412042ad508",
      "name": "Microsoft SQL",
      "credentials": {
        "microsoftSql": {
          "id": "uuLVAMULLxXInMtK",
          "name": "Atos Capital"
        }
      }
    },
    {
      "parameters": {
        "model": "meta-llama/llama-4-maverick-17b-128e-instruct",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        -440,
        1620
      ],
      "id": "3d49cc43-3644-4305-bb86-9d7f27b4dc31",
      "name": "Groq Chat Model",
      "credentials": {
        "groqApi": {
          "id": "RXND1Dx3PYmWh1eD",
          "name": "GROQ"
        }
      }
    },
    {
      "parameters": {
        "model": "meta-llama/llama-4-maverick-17b-128e-instruct",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        -100,
        1620
      ],
      "id": "e67b3acd-05d3-423f-9b81-386ebae5c709",
      "name": "Groq Chat Model1",
      "credentials": {
        "groqApi": {
          "id": "RXND1Dx3PYmWh1eD",
          "name": "GROQ"
        }
      }
    },
    {
      "parameters": {
        "promptType": "=define",
        "text": "={{ $json.pergunta ?? $('Transf Pergunta').item.json.output }}",
        "options": {
          "systemMessage": "=ENVIAR COMO RESPOSTA APENAS O SQL e sem uso de crases, em nomes de filial se atentar aos acentos necessários para o nome Real da cidade A data atual é {{ new Date().toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' }) }}, , Você é uma IA que deve interepretar a pergunta que o usuário está fazendo antes de fazer a consulta no banco, e faça um select personalizado para somente pesquisar o necessário para responder essa pergunta e não consultar o banco de dados completo, antes de gerar o sql veja os exemplos abaixo para se basear, alguns estão pré prontos. Para busca de informações de filial em nmFilial , NÂO UTILIZAR CRASES no SQL. Se eu fizer uma pergunta sobre previsão ou meta e não especificar o mês considere o mês e ano atual de {{ new Date().toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' }) }}, adicionar o nome \"Filial\" antes do nome da filial, minhas colunas do banco são idVendas, nrCNPJ, nmFilial, dtVenda, vlVenda vou enviar alguns exemplos enumerados abaixo:\n\n1. Se receber a palavra Perfeito retorne \"Envie uma pergunta valida\", Se pedir o link do dashboard você deve enviar \"https://atoscapital.streamlit.app/\"\n\n2. Se receber uma pergunta que não tem relação de perguntas com vendas, valores, filiais, metas, previsões você deve retornar \"Não posso responder sobre isso\"\n\n4. Se você receber uma única palavra ou emoji responder \"Envie uma pergunta valida\"\n\n5. Se eu pergunto quantas filiais tenho o sql seria: SELECT COUNT(DISTINCT nmFilial) AS totalFiliais FROM tbVendasDashboard;,\n\n6. Se eu pergunto sobre o acumulado 2024 de uma filial por exemplo qual o acumulado 2024 da filial são paulo o sql seria: SELECT SUM(vlVenda) AS acumulado_vendas_maio_2024 FROM tbVendasDashboard WHERE nmFilial = 'Filial São Paulo' AND YEAR(dtVenda) = 2024 AND MONTH(dtVenda) = 5 AND DAY(dtVenda) IN (SELECT DISTINCT DAY(dtVenda) FROM tbVendasDashboard WHERE nmFilial = 'Filial São Paulo' AND YEAR(dtVenda) = 2025 AND MONTH(dtVenda) = 5 AND vlVenda > 0);\n\n7. Se eu pergunto sobre a previsão de São Paulo em maio de 2025 no sql seria:SELECT CAST((SUM(vlVenda) / COUNT(DISTINCT CAST(dtVenda AS DATE))) * 31 AS DECIMAL(10, 2)) AS previsao_vendas_maio FROM tbVendasDashboard WHERE nmFilial = 'São Paulo' AND YEAR(dtVenda) = 2025 AND MONTH(dtVenda) = 5 AND vlVenda > 0;, \n\n8. Se eu pergunto sobre o acumulado meta da filial Salvador em maio o sql seria: SELECT SUM(vlVenda) * 1.05 AS acumulado_vendas_maio_2024_com_5_porcento FROM tbVendasDashboard WHERE nmFilial = 'Salvador' AND YEAR(dtVenda) = 2024 AND MONTH(dtVenda) = 5 AND DAY(dtVenda) IN (SELECT DISTINCT DAY(dtVenda) FROM tbVendasDashboard WHERE nmFilial = 'Salvador' AND YEAR(dtVenda) = 2025 AND MONTH(dtVenda) = 5 AND vlVenda > 0);\n\n9.Se eu pergunto o acumulado vendas de São Paulo em maio de 2025 o sql seria: SELECT SUM(vlVenda) AS total_vendido_maio_2025 FROM tbVendasDashboard WHERE nmFilial = 'Filial São Paulo' AND YEAR(dtVenda) = 2025 AND MONTH(dtVenda) = 5 AND vlVenda > 0;\n\n10. Se no dia 3-5-25 eu pergunto sobre crescimento meta de maio em São paulo o sql seria: SELECT CAST(ROUND(((SELECT SUM(vlVenda) FROM tbVendasDashboard WHERE nmFilial = 'São Paulo' AND YEAR(dtVenda) = 2025 AND MONTH(dtVenda) = 5 AND vlVenda > 0) / (SELECT SUM(vlVenda) * 1.05 FROM tbVendasDashboard WHERE nmFilial = 'São Paulo' AND YEAR(dtVenda) = 2024 AND MONTH(dtVenda) = 5 AND DAY(dtVenda) IN (SELECT DISTINCT DAY(dtVenda) FROM tbVendasDashboard WHERE nmFilial = 'São Paulo' AND YEAR(dtVenda) = 2025 AND MONTH(dtVenda) = 5 AND vlVenda > 0))) * 100 - 100, 2) AS VARCHAR) + '%' AS resultado_percentual;,\n\n11. Se em 3-5-25 eu pergunto o crescimento de maio de 2025 em São Paulo o sql seria: SELECT CASE WHEN (t2025.total2025 - t2024.total2024) >= 0 THEN '+' + CAST(ROUND(((t2025.total2025 / t2024.total2024) - 1) * 100.0, 2) AS VARCHAR) + '%' ELSE '-' + CAST(ROUND((1 - (t2025.total2025 / t2024.total2024)) * 100.0, 2) AS VARCHAR) + '%' END AS crescimento_percentual FROM (SELECT SUM(vlVenda) AS total2025 FROM tbVendasDashboard WHERE nmFilial = 'São Paulo' AND YEAR(dtVenda) = 2025 AND MONTH(dtVenda) = 5 AND DAY(dtVenda) <= 4 AND vlVenda > 0) AS t2025, (SELECT SUM(vlVenda) AS total2024 FROM tbVendasDashboard WHERE nmFilial = 'São Paulo' AND YEAR(dtVenda) = 2024 AND MONTH(dtVenda) = 5 AND DAY(dtVenda) IN (SELECT DISTINCT DAY(dtVenda) FROM tbVendasDashboard WHERE nmFilial = 'São Paulo' AND YEAR(dtVenda) = 2025 AND MONTH(dtVenda) = 5 AND DAY(dtVenda) <= 4 AND vlVenda > 0)) AS t2024;\n\n12. Se eu pergunto quanto vendi na filial salvador no dia 15 de maio de 2025 o sql seria: SELECT vlVenda FROM tbVendasDashboard WHERE nmFilial = 'Filial Salvador' AND dtVenda = '2025-05-15';,\n\n13. Se eu pergunto quais filiais eu tenho o sql seria: SELECT DISTINCT nmFilial AS nmFilial FROM tbVendasDashboard ORDER BY nmFilial;. \n\n14. Se eu pergunto qual filial minha mais vendeu em janeiro de 2025 o sql seria esse: SELECT TOP 1 nmFilial, SUM(vlVenda) AS total_vendas FROM tbVendasDashboard WHERE YEAR(dtVenda) = 2025 AND MONTH(dtVenda) = 1 GROUP BY nmFilial ORDER BY total_vendas DESC;,\n\n15. Se eu pergunto qual filial minha mais vendeu o sql seria esse: SELECT TOP 1 nmFilial, SUM(vlVenda) AS total_vendas FROM tbVendasDashboard GROUP BY nmFilial ORDER BY total_vendas DESC;, \n\n16. Se a pergunta for Qual a media de vendas dos ultimos 10 dias de fevereiro de 2025 na filial São Paulo o sql seria: SELECT AVG(vlVenda) AS media_vendas FROM tbVendasDashboard WHERE nmFilial = 'Filial São Paulo' AND dtVenda BETWEEN '2025-02-19' AND '2025-02-28';\n\n17. Se eu pergunto Qual minha filial mais vendeu no mês de abril de 2024 e no mês de abril de 2025 o sql seria: SELECT anoMes, nmFilial, total_vendas FROM (SELECT YEAR(dtVenda)*100 + MONTH(dtVenda) AS anoMes, nmFilial, SUM(vlVenda) AS total_vendas, RANK() OVER (PARTITION BY YEAR(dtVenda)*100 + MONTH(dtVenda) ORDER BY SUM(vlVenda) DESC) AS rk FROM tbVendasDashboard WHERE (YEAR(dtVenda) = 2024 AND MONTH(dtVenda) = 4) OR (YEAR(dtVenda) = 2025 AND MONTH(dtVenda) = 4) GROUP BY YEAR(dtVenda)*100 + MONTH(dtVenda), nmFilial) AS t WHERE rk = 1;\n\n18. Se eu pergunto qual a meta de vendas da filial salvador em maio de 2025 o sql seria: SELECT SUM(vlVenda) * 1.05 AS metaMaio2025 FROM tbVendasDashboard WHERE nmFilial = 'Salvador' AND MONTH(dtVenda) = 5 AND YEAR(dtVenda) = 2024;\n\n19. Se eu pergunto Quais filiais bateram a meta em abril de 2025 o sql seria: SELECT v2025.nmFilial FROM (SELECT nmFilial, SUM(vlVenda) AS vendas2025 FROM tbVendasDashboard WHERE MONTH(dtVenda) = 4 AND YEAR(dtVenda) = 2025 GROUP BY nmFilial) v2025 INNER JOIN (SELECT nmFilial, SUM(vlVenda) * 1.05 AS meta2025 FROM tbVendasDashboard WHERE MONTH(dtVenda) = 4 AND YEAR(dtVenda) = 2024 GROUP BY nmFilial) m2025 ON v2025.nmFilial = m2025.nmFilial WHERE v2025.vendas2025 >= m2025.meta2025;,\n\n20. Se eu pergunto quanto eu vendi na filial são paulo em abril de 2025 o sql seria: SELECT SUM(vlVenda) AS vendasAbril2025 FROM tbVendasDashboard WHERE nmFilial = 'São Paulo' AND YEAR(dtVenda) = 2025 AND MONTH(dtVenda) = 4;,\n\n21. Se eu pergunto a previsão de um mês que ja passou por exemplo eu estou em maio de 2025 e pergunto a meta de março de 2025 o sql seria: SELECT SUM(vlVenda) AS previsao_vendas FROM tbVendasDashboard WHERE nmFilial = 'nome_filial' AND YEAR(dtVenda) = 2025 AND MONTH(dtVenda) = 3;,\n\n22. Se eu pergunto qual a maior venda da filial São Paulo o sql seria esse: SELECT MAX(vlVenda) AS maior_venda FROM tbVendasDashboard WHERE nmFilial = 'Filial São Paulo';,\n\n23. Se eu pergunto qual a ultima venda de Belém o sql seria: SELECT TOP 1 dtVenda, vlVenda FROM tbVendasDashboard WHERE nmFilial = 'Belém' AND vlVenda IS NOT NULL ORDER BY dtVenda DESC;\n\n24. Se eu pergunto Quero valor das últimas venda de todas as filiais o sql seria: SELECT nmFilial, dtVenda, vlVenda FROM tbVendasDashboard t1 WHERE dtVenda = (SELECT MAX(dtVenda) FROM tbVendasDashboard t2 WHERE t2.nmFilial = t1.nmFilial AND vlVenda IS NOT NULL) AND vlVenda IS NOT NULL ORDER BY nmFilial;\n\n25. Se eu pergunto o total do Rio de Janeiro esse ano o sql seria: \"SELECT SUM(vlVenda) AS total_vendido_ano_2025 FROM tbVendasDashboard WHERE nmFilial = 'Filial Rio de Janeiro' AND YEAR(dtVenda) = 2025 AND dtVenda <= (SELECT MAX(dtVenda) FROM tbVendasDashboard WHERE YEAR(dtVenda) = 2025 AND nmFilial = 'Filial Rio de Janeiro');\"\n\n26 Se eu pergunto se São Paulo já teve vendas em junho o sql seria: SELECT dtVenda, vlVenda FROM tbVendasDashboard WHERE nmFilial = 'São Paulo' AND MONTH(dtVenda) = 6 AND YEAR(dtVenda) = 2025 AND dtVenda <= CONVERT(DATE, GETDATE()) AND vlVenda IS NOT NULL;\n\n27. Se eu pergunto Qual minha ultima venda de cada filial o sql seria: SELECT nmFilial, dtVenda, vlVenda FROM tbVendasDashboard t1 WHERE dtVenda = (SELECT MAX(dtVenda) FROM tbVendasDashboard t2 WHERE t2.nmFilial = t1.nmFilial AND vlVenda IS NOT NULL) AND vlVenda IS NOT NULL ORDER BY nmFilial ASC;\n\n28. Se eu pergunto Qual a maior venda de cada filial o sql seria: SELECT nmFilial, dtVenda, vlVenda FROM tbVendasDashboard t1 WHERE vlVenda = (SELECT MAX(vlVenda) FROM tbVendasDashboard t2 WHERE t2.nmFilial = t1.nmFilial AND vlVenda IS NOT NULL) AND vlVenda IS NOT NULL ORDER BY nmFilial ASC;\n\n\n29. O dia atual é {{ new Date().toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' }) }}\n\n\nResponder somente com o sql correto lembrando que eu uso SQL SERVER anterior a 2012, sem aspas crases ou chaves\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        -500,
        1420
      ],
      "id": "ff81d82b-c880-4af1-8486-19937e1c24f0",
      "name": "Transformar em SQL"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.output }}",
        "options": {
          "systemMessage": "=Siga todas as regras abaixo enumeradas:\n\n1. Seja o mais rápido possivel\n2. A data de hoje é {{ new Date().toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' }) }}, \n3. Se a pergunta for sobre o link do dashboard e vinher \"https://atoscapital.streamlit.app/\" você não deve fazer nenhuma consulta no banco de dados, deve apenas enviar esse link\n4. Você deve pegar o sql que vem do nó Transformar em SQL e executar no banco e enviar somente a resposta do banco de dados sem enviar nada de código sql enviar somente a resposta mesmo e não enviar nenhum nome de coluna do banco de dados, responder sempre em Pt-Br,\n5. datas responder no padrão brasileiro, e quando preciso usar moedas usar o real brasileiro com \".\" para separar os milhares e \",\" para os decimais \n6. Se a mensagem que você recebeu for uma palavra \"Envie uma pergunta valida\",\n7. Se receber a palavra Perfeito retorne \"Envie uma pergunta valida\" \n8. Se no banco não tiver a resposta responder \"Não possuo conhecimento sobre isso\", \n9. Se der erro na banco responda \"Tive um erro no processamento, faça a pergunta novamente\".\n10. se algum valor vinher NULL do banco responder \"Não tenho vendas cadastradas para esse dia\". \n11. Quanto ultrapassar o nível de tokens da api responder \"Pergunta ultrapassa o nível de tokens permitidos\"\n12. Não enviar nada em Inglês em hipotese alguma\n13. Antes de valores de dinheiro sempre enviar antes o R$\n14. Sempre que pedir para listar, detalhar, ou com detalhes enviar dados com quebra de linhas bonitos esteticamente e não tudo em linha única\n15. Se ultrapassar o limite de tokens responda \"Limite de tokens ultrapassado\"\n16. Você sempre deve contextualizar um pouco exemplo na resposta, nunca envie somente o resultado: Se a pergunta é sobre maior venda você deve responder \"A maior venda foi e o valor\", se a pergunta é sobre quantidade de filial você responde \"A quantidade de filial é e a quantidade\" Se a pergunta e sobre qual filial mais vendeu você responde \"A filial que mais vendeu é e o nome da filial e quanto ela vendeu, e va seguindo esses exemplos e adaptando a pergunta\"\n17. Se a pergunta envolve data como \"Quanto vendi do dia 1 ao dia 4 em SP\", \"Qual a maior venda de SP\" essas coisas assim além do nome da filial e valor enviar a data tambem\n18. Se tiver qualquer erro responda \"Tive um erro, faça a pergunta novamente\""
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        -120,
        1460
      ],
      "id": "873f9949-e308-41fa-b1b8-b657fca6f776",
      "name": "Puxar no Banco"
    },
    {
      "parameters": {
        "functionCode": "// Obtém os dados persistentes (nível do workflow)\nconst staticData = getWorkflowStaticData('global');\n\nconst currentQuestion = $('Numeros Autorizados').item.json.pergunta ?? '';\nconst previousQuestion = staticData.ultimaPergunta ?? '';\n\n// Função para verificar se a pergunta atual é continuação da anterior\nfunction isContinuousQuestion(prev, current) {\n  if (!prev || !current) return false; // Se uma for vazia, não considera continuação\n\n  const currentTrim = current.trim().toLowerCase();\n\n  // Se a pergunta nova for curta (menos de 10 caracteres), pode ser continuação\n  if (currentTrim.length < 10) return true;\n\n  // Palavras/expressões típicas que indicam continuação\n  const continuaçãoStarts = [\n    'e ', 'e no', 'e na', 'e em',\n    'e no ', 'e na ', 'e em ',\n    'e no', 'e na', 'e em',\n    'no ', 'na ', 'em ',\n    'e quanto', 'e qual',\n    'também', 'tambem', 'agora', 'em qual', 'qual dia', 'e o dia'\n  ];\n\n  // Verifica se começa com alguma dessas expressões\n  for (const start of continuaçãoStarts) {\n    if (currentTrim.startsWith(start)) {\n      return true;\n    }\n  }\n\n  // Se tiver poucas palavras (1 ou 2) pode ser continuação\n  const words = currentTrim.split(/\\s+/);\n  if (words.length <= 2) return true;\n\n  return false;\n}\n\nconst isContinuous = isContinuousQuestion(previousQuestion, currentQuestion);\n\n// Atualiza valor salvo\nstaticData.ultimaPergunta = currentQuestion;\n\nreturn [{\n  json: {\n    currentQuestion,\n    previousQuestion,\n    isContinuous  // true se for continuação, false se não\n  }\n}];\n"
      },
      "name": "Comparar Pergunta",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -1760,
        1580
      ],
      "id": "2614dff5-3d52-4516-9b4b-036e35cac3b2"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "b92aae35-cfd8-4661-bbc7-55fff9c56d21",
              "leftValue": "={{$json[\"isContinuous\"]}}",
              "rightValue": "true",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "or"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1560,
        1540
      ],
      "id": "30f2364e-6c9d-4413-91ef-66085877753a",
      "name": "If7"
    },
    {
      "parameters": {
        "model": "meta-llama/llama-4-maverick-17b-128e-instruct",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        -1180,
        1500
      ],
      "id": "bb347bb5-3731-4cef-bdd5-055d68d8311f",
      "name": "Groq Chat Model11",
      "credentials": {
        "groqApi": {
          "id": "RXND1Dx3PYmWh1eD",
          "name": "GROQ"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT codigo FROM atoscapital.sql WHERE numero = {{ $('If').item.json.numero }} ORDER BY id DESC LIMIT 1;\n",
        "options": {}
      },
      "type": "n8n-nodes-base.mySql",
      "typeVersion": 2.4,
      "position": [
        -1360,
        1460
      ],
      "id": "7c9d9eb7-f156-435c-98bd-a082862bffb1",
      "name": "MySQL",
      "credentials": {
        "mySql": {
          "id": "S6qEZzd9OoEbJ7Bt",
          "name": "Atos Capital"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO atoscapital.sql (codigo, numero) VALUES ('{{ $('Numeros Autorizados').item.json.pergunta }}', {{ $('If').item.json.numero }});\n",
        "options": {}
      },
      "type": "n8n-nodes-base.mySql",
      "typeVersion": 2.4,
      "position": [
        -1280,
        1660
      ],
      "id": "9ac46139-24d1-4b59-ab65-78b47d4cc47a",
      "name": "MySQL1",
      "credentials": {
        "mySql": {
          "id": "S6qEZzd9OoEbJ7Bt",
          "name": "Atos Capital"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('Numeros Autorizados').item.json.pergunta }}",
        "options": {
          "systemMessage": "=Você deve pegar a pergunta que recebeu de {{ $json.codigo }} e somente alterar a parte necessária para o que recebeu de {{ $('Numeros Autorizados').item.json.pergunta }}. Não justifique nada, apenas envia a resposta final. Ai se a pergunta anterior foi \"e a menor\" e a atual \"e no rj\" você deve formular por exemplo \"Qual a menor venda do RJ\". Se atente bem e envie somente a pergunta e ela completa igual a anterior alterando somente o necessario"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        -1180,
        1340
      ],
      "id": "986108ba-dd6b-46eb-9fa1-cb998af72f00",
      "name": "Transf Pergunta"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a11946a9-c769-4b27-9dc1-1404be31be3b",
              "name": "pergunta",
              "value": "={{ $('Comparar Pergunta').item.json.currentQuestion }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -980,
        1660
      ],
      "id": "6c611002-2784-4668-900f-b9d0c86c861e",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO atoscapital.sql (codigo, numero) VALUES (' {{ $json.output }}', {{ $('If').item.json.numero }});\n",
        "options": {}
      },
      "type": "n8n-nodes-base.mySql",
      "typeVersion": 2.4,
      "position": [
        -820,
        1380
      ],
      "id": "6c7f9f07-285d-475d-a3e9-84c73fdf6d86",
      "name": "MySQL2",
      "credentials": {
        "mySql": {
          "id": "S6qEZzd9OoEbJ7Bt",
          "name": "Atos Capital"
        }
      }
    },
    {
      "parameters": {
        "resource": "messages-api",
        "instanceName": "=atoscapital",
        "remoteJid": "={{ $('If1').item.json.numero }}\n",
        "messageText": "={{ $('Puxar no Banco2').item.json.output }}",
        "options_message": {
          "delay": 300
        }
      },
      "type": "n8n-nodes-evolution-api.evolutionApi",
      "typeVersion": 1,
      "position": [
        1180,
        2520
      ],
      "id": "11f08771-702b-499b-9797-debe5f4b87a4",
      "name": "Enviar Resposta Pergunta2",
      "credentials": {
        "evolutionApi": {
          "id": "19NxyORpzpOmLGmT",
          "name": "Evolution API"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "{{ $json.output }}"
      },
      "type": "n8n-nodes-base.microsoftSqlTool",
      "typeVersion": 1.1,
      "position": [
        820,
        2680
      ],
      "id": "6ae91aca-a7bc-4694-b890-05c978669660",
      "name": "Microsoft SQL6",
      "credentials": {
        "microsoftSql": {
          "id": "uuLVAMULLxXInMtK",
          "name": "Atos Capital"
        }
      }
    },
    {
      "parameters": {
        "model": "meta-llama/llama-4-maverick-17b-128e-instruct",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        300,
        2680
      ],
      "id": "5e27488d-b78e-48dc-9a84-388969f11fe5",
      "name": "Groq Chat Model7",
      "credentials": {
        "groqApi": {
          "id": "RXND1Dx3PYmWh1eD",
          "name": "GROQ"
        }
      }
    },
    {
      "parameters": {
        "model": "meta-llama/llama-4-maverick-17b-128e-instruct",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        640,
        2680
      ],
      "id": "d8a265a6-4ac7-405f-bde1-992ca9701c1e",
      "name": "Groq Chat Model8",
      "credentials": {
        "groqApi": {
          "id": "RXND1Dx3PYmWh1eD",
          "name": "GROQ"
        }
      }
    },
    {
      "parameters": {
        "promptType": "=define",
        "text": "={{ $json.pergunta ?? $('Transf Pergunta1').item.json.output }}",
        "options": {
          "systemMessage": "=ENVIAR COMO RESPOSTA APENAS O SQL e sem uso de crases, em nomes de filial se atentar aos acentos necessários para o nome Real da cidade A data atual é {{ new Date().toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' }) }}, , Você é uma IA que deve interepretar a pergunta que o usuário está fazendo antes de fazer a consulta no banco, e faça um select personalizado para somente pesquisar o necessário para responder essa pergunta e não consultar o banco de dados completo, antes de gerar o sql veja os exemplos abaixo para se basear, alguns estão pré prontos. Para busca de informações de filial em nmFilial , NÂO UTILIZAR CRASES no SQL. Se eu fizer uma pergunta sobre previsão ou meta e não especificar o mês considere o mês e ano atual de {{ new Date().toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' }) }}, adicionar o nome \"Filial\" antes do nome da filial, minhas colunas do banco são idVendas, nrCNPJ, nmFilial, dtVenda, vlVenda vou enviar alguns exemplos enumerados abaixo:\n\n1. Se receber a palavra Perfeito retorne \"Envie uma pergunta valida\", Se pedir o link do dashboard você deve enviar \"https://atoscapital.streamlit.app/\"\n\n2. Se receber uma pergunta que não tem relação de perguntas com vendas, valores, filiais, metas, previsões você deve retornar \"Não posso responder sobre isso\"\n\n4. Se você receber uma única palavra ou emoji responder \"Envie uma pergunta valida\"\n\n5. Se eu pergunto quantas filiais tenho o sql seria: SELECT COUNT(DISTINCT nmFilial) AS totalFiliais FROM tbVendasDashboard;,\n\n6. Se eu pergunto sobre o acumulado 2024 de uma filial por exemplo qual o acumulado 2024 da filial são paulo o sql seria: SELECT SUM(vlVenda) AS acumulado_vendas_maio_2024 FROM tbVendasDashboard WHERE nmFilial = 'Filial São Paulo' AND YEAR(dtVenda) = 2024 AND MONTH(dtVenda) = 5 AND DAY(dtVenda) IN (SELECT DISTINCT DAY(dtVenda) FROM tbVendasDashboard WHERE nmFilial = 'Filial São Paulo' AND YEAR(dtVenda) = 2025 AND MONTH(dtVenda) = 5 AND vlVenda > 0);\n\n7. Se eu pergunto sobre a previsão de São Paulo em maio de 2025 no sql seria:SELECT CAST((SUM(vlVenda) / COUNT(DISTINCT CAST(dtVenda AS DATE))) * 31 AS DECIMAL(10, 2)) AS previsao_vendas_maio FROM tbVendasDashboard WHERE nmFilial = 'São Paulo' AND YEAR(dtVenda) = 2025 AND MONTH(dtVenda) = 5 AND vlVenda > 0;, \n\n8. Se eu pergunto sobre o acumulado meta da filial Salvador em maio o sql seria: SELECT SUM(vlVenda) * 1.05 AS acumulado_vendas_maio_2024_com_5_porcento FROM tbVendasDashboard WHERE nmFilial = 'Salvador' AND YEAR(dtVenda) = 2024 AND MONTH(dtVenda) = 5 AND DAY(dtVenda) IN (SELECT DISTINCT DAY(dtVenda) FROM tbVendasDashboard WHERE nmFilial = 'Salvador' AND YEAR(dtVenda) = 2025 AND MONTH(dtVenda) = 5 AND vlVenda > 0);\n\n9.Se eu pergunto o acumulado vendas de São Paulo em maio de 2025 o sql seria: SELECT SUM(vlVenda) AS total_vendido_maio_2025 FROM tbVendasDashboard WHERE nmFilial = 'Filial São Paulo' AND YEAR(dtVenda) = 2025 AND MONTH(dtVenda) = 5 AND vlVenda > 0;\n\n10. Se no dia 3-5-25 eu pergunto sobre crescimento meta de maio em São paulo o sql seria: SELECT CAST(ROUND(((SELECT SUM(vlVenda) FROM tbVendasDashboard WHERE nmFilial = 'São Paulo' AND YEAR(dtVenda) = 2025 AND MONTH(dtVenda) = 5 AND vlVenda > 0) / (SELECT SUM(vlVenda) * 1.05 FROM tbVendasDashboard WHERE nmFilial = 'São Paulo' AND YEAR(dtVenda) = 2024 AND MONTH(dtVenda) = 5 AND DAY(dtVenda) IN (SELECT DISTINCT DAY(dtVenda) FROM tbVendasDashboard WHERE nmFilial = 'São Paulo' AND YEAR(dtVenda) = 2025 AND MONTH(dtVenda) = 5 AND vlVenda > 0))) * 100 - 100, 2) AS VARCHAR) + '%' AS resultado_percentual;,\n\n11. Se em 3-5-25 eu pergunto o crescimento de maio de 2025 em São Paulo o sql seria: SELECT CASE WHEN (t2025.total2025 - t2024.total2024) >= 0 THEN '+' + CAST(ROUND(((t2025.total2025 / t2024.total2024) - 1) * 100.0, 2) AS VARCHAR) + '%' ELSE '-' + CAST(ROUND((1 - (t2025.total2025 / t2024.total2024)) * 100.0, 2) AS VARCHAR) + '%' END AS crescimento_percentual FROM (SELECT SUM(vlVenda) AS total2025 FROM tbVendasDashboard WHERE nmFilial = 'São Paulo' AND YEAR(dtVenda) = 2025 AND MONTH(dtVenda) = 5 AND DAY(dtVenda) <= 4 AND vlVenda > 0) AS t2025, (SELECT SUM(vlVenda) AS total2024 FROM tbVendasDashboard WHERE nmFilial = 'São Paulo' AND YEAR(dtVenda) = 2024 AND MONTH(dtVenda) = 5 AND DAY(dtVenda) IN (SELECT DISTINCT DAY(dtVenda) FROM tbVendasDashboard WHERE nmFilial = 'São Paulo' AND YEAR(dtVenda) = 2025 AND MONTH(dtVenda) = 5 AND DAY(dtVenda) <= 4 AND vlVenda > 0)) AS t2024;\n\n12. Se eu pergunto quanto vendi na filial salvador no dia 15 de maio de 2025 o sql seria: SELECT vlVenda FROM tbVendasDashboard WHERE nmFilial = 'Filial Salvador' AND dtVenda = '2025-05-15';,\n\n13. Se eu pergunto quais filiais eu tenho o sql seria: SELECT DISTINCT nmFilial AS nmFilial FROM tbVendasDashboard ORDER BY nmFilial;. \n\n14. Se eu pergunto qual filial minha mais vendeu em janeiro de 2025 o sql seria esse: SELECT TOP 1 nmFilial, SUM(vlVenda) AS total_vendas FROM tbVendasDashboard WHERE YEAR(dtVenda) = 2025 AND MONTH(dtVenda) = 1 GROUP BY nmFilial ORDER BY total_vendas DESC;,\n\n15. Se eu pergunto qual filial minha mais vendeu o sql seria esse: SELECT TOP 1 nmFilial, SUM(vlVenda) AS total_vendas FROM tbVendasDashboard GROUP BY nmFilial ORDER BY total_vendas DESC;, \n\n16. Se a pergunta for Qual a media de vendas dos ultimos 10 dias de fevereiro de 2025 na filial São Paulo o sql seria: SELECT AVG(vlVenda) AS media_vendas FROM tbVendasDashboard WHERE nmFilial = 'Filial São Paulo' AND dtVenda BETWEEN '2025-02-19' AND '2025-02-28';\n\n17. Se eu pergunto Qual minha filial mais vendeu no mês de abril de 2024 e no mês de abril de 2025 o sql seria: SELECT anoMes, nmFilial, total_vendas FROM (SELECT YEAR(dtVenda)*100 + MONTH(dtVenda) AS anoMes, nmFilial, SUM(vlVenda) AS total_vendas, RANK() OVER (PARTITION BY YEAR(dtVenda)*100 + MONTH(dtVenda) ORDER BY SUM(vlVenda) DESC) AS rk FROM tbVendasDashboard WHERE (YEAR(dtVenda) = 2024 AND MONTH(dtVenda) = 4) OR (YEAR(dtVenda) = 2025 AND MONTH(dtVenda) = 4) GROUP BY YEAR(dtVenda)*100 + MONTH(dtVenda), nmFilial) AS t WHERE rk = 1;\n\n18. Se eu pergunto qual a meta de vendas da filial salvador em maio de 2025 o sql seria: SELECT SUM(vlVenda) * 1.05 AS metaMaio2025 FROM tbVendasDashboard WHERE nmFilial = 'Salvador' AND MONTH(dtVenda) = 5 AND YEAR(dtVenda) = 2024;\n\n19. Se eu pergunto Quais filiais bateram a meta em abril de 2025 o sql seria: SELECT v2025.nmFilial FROM (SELECT nmFilial, SUM(vlVenda) AS vendas2025 FROM tbVendasDashboard WHERE MONTH(dtVenda) = 4 AND YEAR(dtVenda) = 2025 GROUP BY nmFilial) v2025 INNER JOIN (SELECT nmFilial, SUM(vlVenda) * 1.05 AS meta2025 FROM tbVendasDashboard WHERE MONTH(dtVenda) = 4 AND YEAR(dtVenda) = 2024 GROUP BY nmFilial) m2025 ON v2025.nmFilial = m2025.nmFilial WHERE v2025.vendas2025 >= m2025.meta2025;,\n\n20. Se eu pergunto quanto eu vendi na filial são paulo em abril de 2025 o sql seria: SELECT SUM(vlVenda) AS vendasAbril2025 FROM tbVendasDashboard WHERE nmFilial = 'São Paulo' AND YEAR(dtVenda) = 2025 AND MONTH(dtVenda) = 4;,\n\n21. Se eu pergunto a previsão de um mês que ja passou por exemplo eu estou em maio de 2025 e pergunto a meta de março de 2025 o sql seria: SELECT SUM(vlVenda) AS previsao_vendas FROM tbVendasDashboard WHERE nmFilial = 'nome_filial' AND YEAR(dtVenda) = 2025 AND MONTH(dtVenda) = 3;,\n\n22. Se eu pergunto qual a maior venda da filial São Paulo o sql seria esse: SELECT MAX(vlVenda) AS maior_venda FROM tbVendasDashboard WHERE nmFilial = 'Filial São Paulo';,\n\n23. Se eu pergunto qual a ultima venda de Belém o sql seria: SELECT TOP 1 dtVenda, vlVenda FROM tbVendasDashboard WHERE nmFilial = 'Belém' AND vlVenda IS NOT NULL ORDER BY dtVenda DESC;\n\n24. Se eu pergunto Quero valor das últimas venda de todas as filiais o sql seria: SELECT nmFilial, dtVenda, vlVenda FROM tbVendasDashboard t1 WHERE dtVenda = (SELECT MAX(dtVenda) FROM tbVendasDashboard t2 WHERE t2.nmFilial = t1.nmFilial AND vlVenda IS NOT NULL) AND vlVenda IS NOT NULL ORDER BY nmFilial;\n\n25. Se eu pergunto o total do Rio de Janeiro esse ano o sql seria: \"SELECT SUM(vlVenda) AS total_vendido_ano_2025 FROM tbVendasDashboard WHERE nmFilial = 'Filial Rio de Janeiro' AND YEAR(dtVenda) = 2025 AND dtVenda <= (SELECT MAX(dtVenda) FROM tbVendasDashboard WHERE YEAR(dtVenda) = 2025 AND nmFilial = 'Filial Rio de Janeiro');\"\n\n26 Se eu pergunto se São Paulo já teve vendas em junho o sql seria: SELECT dtVenda, vlVenda FROM tbVendasDashboard WHERE nmFilial = 'São Paulo' AND MONTH(dtVenda) = 6 AND YEAR(dtVenda) = 2025 AND dtVenda <= CONVERT(DATE, GETDATE()) AND vlVenda IS NOT NULL;\n\n27. Se eu pergunto Qual minha ultima venda de cada filial o sql seria: SELECT nmFilial, dtVenda, vlVenda FROM tbVendasDashboard t1 WHERE dtVenda = (SELECT MAX(dtVenda) FROM tbVendasDashboard t2 WHERE t2.nmFilial = t1.nmFilial AND vlVenda IS NOT NULL) AND vlVenda IS NOT NULL ORDER BY nmFilial ASC;\n\n28. Se eu pergunto Qual a maior venda de cada filial o sql seria: SELECT nmFilial, dtVenda, vlVenda FROM tbVendasDashboard t1 WHERE vlVenda = (SELECT MAX(vlVenda) FROM tbVendasDashboard t2 WHERE t2.nmFilial = t1.nmFilial AND vlVenda IS NOT NULL) AND vlVenda IS NOT NULL ORDER BY nmFilial ASC;\n\n\n29. O dia atual é {{ new Date().toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' }) }}\n\n\nResponder somente com o sql correto lembrando que eu uso SQL SERVER anterior a 2012, sem aspas crases ou chaves\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        240,
        2480
      ],
      "id": "240f163b-2e3f-41f8-958e-75ba002da7e9",
      "name": "Transformar em SQL4"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.output }}",
        "options": {
          "systemMessage": "=Siga todas as regras abaixo enumeradas:\n\n1. Seja o mais rápido possivel\n2. A data de hoje é {{ new Date().toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' }) }}, \n3. Se a pergunta for sobre o link do dashboard e vinher \"https://atoscapital.streamlit.app/\" você não deve fazer nenhuma consulta no banco de dados, deve apenas enviar esse link\n4. Você deve pegar o sql que vem do nó Transformar em SQL e executar no banco e enviar somente a resposta do banco de dados sem enviar nada de código sql enviar somente a resposta mesmo e não enviar nenhum nome de coluna do banco de dados, responder sempre em Pt-Br,\n5. datas responder no padrão brasileiro, e quando preciso usar moedas usar o real brasileiro com \".\" para separar os milhares e \",\" para os decimais \n6. Se a mensagem que você recebeu for uma palavra \"Envie uma pergunta valida\",\n7. Se receber a palavra Perfeito retorne \"Envie uma pergunta valida\" \n8. Se no banco não tiver a resposta responder \"Não possuo conhecimento sobre isso\", \n9. Se der erro na banco responda \"Tive um erro no processamento, faça a pergunta novamente\".\n10. se algum valor vinher NULL do banco responder \"Não tenho vendas cadastradas para esse dia\". \n11. Quanto ultrapassar o nível de tokens da api responder \"Pergunta ultrapassa o nível de tokens permitidos\"\n12. Não enviar nada em Inglês em hipotese alguma\n13. Antes de valores de dinheiro sempre enviar antes o R$\n14. Sempre que pedir para listar, detalhar, ou com detalhes enviar dados com quebra de linhas bonitos esteticamente e não tudo em linha única\n15. Se ultrapassar o limite de tokens responda \"Limite de tokens ultrapassado\"\n16. Você sempre deve contextualizar um pouco exemplo na resposta, nunca envie somente o resultado: Se a pergunta é sobre maior venda você deve responder \"A maior venda foi e o valor\", se a pergunta é sobre quantidade de filial você responde \"A quantidade de filial é e a quantidade\" Se a pergunta e sobre qual filial mais vendeu você responde \"A filial que mais vendeu é e o nome da filial e quanto ela vendeu, e va seguindo esses exemplos e adaptando a pergunta\"\n17. Se a pergunta envolve data como \"Quanto vendi do dia 1 ao dia 4 em SP\", \"Qual a maior venda de SP\" essas coisas assim além do nome da filial e valor enviar a data tambem\n18. Se tiver qualquer erro responda \"Tive um erro, faça a pergunta novamente\""
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        620,
        2520
      ],
      "id": "f1d81af3-43ea-4b46-9d58-19b763329334",
      "name": "Puxar no Banco2"
    },
    {
      "parameters": {
        "functionCode": "// Obtém os dados persistentes (nível do workflow)\nconst staticData = getWorkflowStaticData('global');\n\nconst currentQuestion = $('Numeros Autorizados1').item.json.pergunta ?? '';\nconst previousQuestion = staticData.ultimaPergunta ?? '';\n\n// Função para verificar se a pergunta atual é continuação da anterior\nfunction isContinuousQuestion(prev, current) {\n  if (!prev || !current) return false; // Se uma for vazia, não considera continuação\n\n  const currentTrim = current.trim().toLowerCase();\n\n  // Se a pergunta nova for curta (menos de 10 caracteres), pode ser continuação\n  if (currentTrim.length < 10) return true;\n\n  // Palavras/expressões típicas que indicam continuação\n  const continuaçãoStarts = [\n    'e ', 'e no', 'e na', 'e em',\n    'e no ', 'e na ', 'e em ',\n    'e no', 'e na', 'e em',\n    'no ', 'na ', 'em ',\n    'e quanto', 'e qual',\n    'também', 'tambem', 'agora', 'em qual', 'qual dia', 'e o dia'\n  ];\n\n  // Verifica se começa com alguma dessas expressões\n  for (const start of continuaçãoStarts) {\n    if (currentTrim.startsWith(start)) {\n      return true;\n    }\n  }\n\n  // Se tiver poucas palavras (1 ou 2) pode ser continuação\n  const words = currentTrim.split(/\\s+/);\n  if (words.length <= 2) return true;\n\n  return false;\n}\n\nconst isContinuous = isContinuousQuestion(previousQuestion, currentQuestion);\n\n// Atualiza valor salvo\nstaticData.ultimaPergunta = currentQuestion;\n\nreturn [{\n  json: {\n    currentQuestion,\n    previousQuestion,\n    isContinuous  // true se for continuação, false se não\n  }\n}];\n"
      },
      "name": "Comparar Pergunta1",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -960,
        2580
      ],
      "id": "318366fc-320b-43e9-a636-6de7668d079c"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "b92aae35-cfd8-4661-bbc7-55fff9c56d21",
              "leftValue": "={{$json[\"isContinuous\"]}}",
              "rightValue": "true",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "or"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -760,
        2620
      ],
      "id": "5403d3b6-230e-4234-a7fb-54110a7d9ab4",
      "name": "If8"
    },
    {
      "parameters": {
        "model": "meta-llama/llama-4-maverick-17b-128e-instruct",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        -420,
        2460
      ],
      "id": "a25016b7-018b-4ba8-beac-ec17701b3923",
      "name": "Groq Chat Model12",
      "credentials": {
        "groqApi": {
          "id": "RXND1Dx3PYmWh1eD",
          "name": "GROQ"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT codigo FROM atoscapital.sql WHERE numero = {{ $('If1').item.json.numero }} ORDER BY id DESC LIMIT 1;\n",
        "options": {}
      },
      "type": "n8n-nodes-base.mySql",
      "typeVersion": 2.4,
      "position": [
        -600,
        2420
      ],
      "id": "7a039ed8-793c-4e49-ab37-7577a30682db",
      "name": "MySQL3",
      "credentials": {
        "mySql": {
          "id": "S6qEZzd9OoEbJ7Bt",
          "name": "Atos Capital"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO atoscapital.sql (codigo, numero) VALUES ('{{ $('Numeros Autorizados1').item.json.pergunta }}', {{ $('If1').item.json.numero }});\n",
        "options": {}
      },
      "type": "n8n-nodes-base.mySql",
      "typeVersion": 2.4,
      "position": [
        -520,
        2620
      ],
      "id": "6681d0c5-914f-475e-aeb8-b2c84718550c",
      "name": "MySQL4",
      "credentials": {
        "mySql": {
          "id": "S6qEZzd9OoEbJ7Bt",
          "name": "Atos Capital"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('Numeros Autorizados1').item.json.pergunta }}",
        "options": {
          "systemMessage": "=Você deve pegar a pergunta que recebeu de {{ $json.codigo }} e somente alterar a parte necessária para o que recebeu de {{ $('Numeros Autorizados1').item.json.pergunta }}. Não justifique nada, apenas envia a resposta final. Ai se a pergunta anterior foi \"e a menor\" e a atual \"e no rj\" você deve formular por exemplo \"Qual a menor venda do RJ\". Se atente bem e envie somente a pergunta e ela completa igual a anterior alterando somente o necessario"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        -420,
        2300
      ],
      "id": "6b45d2f6-7413-41f8-acab-065e902321a9",
      "name": "Transf Pergunta1"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a11946a9-c769-4b27-9dc1-1404be31be3b",
              "name": "pergunta",
              "value": "={{ $('Comparar Pergunta1').item.json.currentQuestion }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -280,
        2620
      ],
      "id": "fe39ccd0-e2d3-4cbf-b8d4-79ce46af4332",
      "name": "Edit Fields1"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO atoscapital.sql (codigo, numero) VALUES (' {{ $json.output }}', {{ $('If1').item.json.numero }});\n",
        "options": {}
      },
      "type": "n8n-nodes-base.mySql",
      "typeVersion": 2.4,
      "position": [
        -60,
        2340
      ],
      "id": "191a790b-ccb5-4529-ad99-8e5a12e61e26",
      "name": "MySQL5",
      "credentials": {
        "mySql": {
          "id": "S6qEZzd9OoEbJ7Bt",
          "name": "Atos Capital"
        }
      }
    },
    {
      "parameters": {
        "functionCode": "// Obtém os dados persistentes (nível do workflow)\nconst staticData = getWorkflowStaticData('global');\n\nconst currentQuestion = $('Numeros Autorizados1').item.json.pergunta ?? '';\nconst previousQuestion = staticData.ultimaPergunta ?? '';\n\n// Função para verificar se a pergunta atual é continuação da anterior\nfunction isContinuousQuestion(prev, current) {\n  if (!prev || !current) return false; // Se uma for vazia, não considera continuação\n\n  const currentTrim = current.trim().toLowerCase();\n\n  // Se a pergunta nova for curta (menos de 10 caracteres), pode ser continuação\n  if (currentTrim.length < 10) return true;\n\n  // Palavras/expressões típicas que indicam continuação\n  const continuaçãoStarts = [\n    'e ', 'e no', 'e na', 'e em',\n    'e no ', 'e na ', 'e em ',\n    'e no', 'e na', 'e em',\n    'no ', 'na ', 'em ',\n    'e quanto', 'e qual',\n    'também', 'tambem', 'agora', 'em qual', 'qual dia', 'e o dia'\n  ];\n\n  // Verifica se começa com alguma dessas expressões\n  for (const start of continuaçãoStarts) {\n    if (currentTrim.startsWith(start)) {\n      return true;\n    }\n  }\n\n  // Se tiver poucas palavras (1 ou 2) pode ser continuação\n  const words = currentTrim.split(/\\s+/);\n  if (words.length <= 2) return true;\n\n  return false;\n}\n\nconst isContinuous = isContinuousQuestion(previousQuestion, currentQuestion);\n\n// Atualiza valor salvo\nstaticData.ultimaPergunta = currentQuestion;\n\nreturn [{\n  json: {\n    currentQuestion,\n    previousQuestion,\n    isContinuous  // true se for continuação, false se não\n  }\n}];\n"
      },
      "name": "Comparar Pergunta2",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        -1060,
        2900
      ],
      "id": "94fe3586-c6fd-4990-9233-28532258b25e"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "b92aae35-cfd8-4661-bbc7-55fff9c56d21",
              "leftValue": "={{$json[\"isContinuous\"]}}",
              "rightValue": "true",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            }
          ],
          "combinator": "or"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -880,
        3100
      ],
      "id": "2981dc3f-bfa9-46da-9a8d-452771833932",
      "name": "If9"
    },
    {
      "parameters": {
        "model": "meta-llama/llama-4-maverick-17b-128e-instruct",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        -540,
        2940
      ],
      "id": "4f4c38a4-7c91-47da-a18d-35efbd5c790e",
      "name": "Groq Chat Model13",
      "credentials": {
        "groqApi": {
          "id": "RXND1Dx3PYmWh1eD",
          "name": "GROQ"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT codigo FROM atoscapital.sql WHERE numero = {{ $('If1').item.json.numero }} ORDER BY id DESC LIMIT 1;\n",
        "options": {}
      },
      "type": "n8n-nodes-base.mySql",
      "typeVersion": 2.4,
      "position": [
        -720,
        2900
      ],
      "id": "70e9d736-85ad-498c-b0f5-62fef7a8f1df",
      "name": "MySQL6",
      "credentials": {
        "mySql": {
          "id": "S6qEZzd9OoEbJ7Bt",
          "name": "Atos Capital"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO atoscapital.sql (codigo, numero) VALUES ('{{ $('Numeros Autorizados1').item.json.pergunta }}', {{ $('If1').item.json.numero }});\n",
        "options": {}
      },
      "type": "n8n-nodes-base.mySql",
      "typeVersion": 2.4,
      "position": [
        -640,
        3100
      ],
      "id": "b18a8927-5e3f-4581-adb2-159ee4757683",
      "name": "MySQL7",
      "credentials": {
        "mySql": {
          "id": "S6qEZzd9OoEbJ7Bt",
          "name": "Atos Capital"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $('Numeros Autorizados1').item.json.pergunta }}",
        "options": {
          "systemMessage": "=Você deve pegar a pergunta que recebeu de {{ $json.codigo }} e somente alterar a parte necessária para o que recebeu de {{ $('Numeros Autorizados1').item.json.pergunta }}. Não justifique nada, apenas envia a resposta final. Ai se a pergunta anterior foi \"e a menor\" e a atual \"e no rj\" você deve formular por exemplo \"Qual a menor venda do RJ\". Se atente bem e envie somente a pergunta e ela completa igual a anterior alterando somente o necessario"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.9,
      "position": [
        -540,
        2780
      ],
      "id": "7a94a923-c33d-47c0-a9ed-f5fc3951e850",
      "name": "Transf Pergunta2"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "a11946a9-c769-4b27-9dc1-1404be31be3b",
              "name": "pergunta",
              "value": "={{ $('Comparar Pergunta2').item.json.currentQuestion }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -400,
        3100
      ],
      "id": "1b940c5d-efac-4b67-af75-6b9199ebf4ba",
      "name": "Edit Fields2"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO atoscapital.sql (codigo, numero) VALUES (' {{ $json.output }}', {{ $('If1').item.json.numero }});\n",
        "options": {}
      },
      "type": "n8n-nodes-base.mySql",
      "typeVersion": 2.4,
      "position": [
        -180,
        2820
      ],
      "id": "039886fb-dff9-42e6-9ce4-d6a196fdff41",
      "name": "MySQL8",
      "credentials": {
        "mySql": {
          "id": "S6qEZzd9OoEbJ7Bt",
          "name": "Atos Capital"
        }
      }
    },
    {
      "parameters": {
        "model": "meta-llama/llama-4-maverick-17b-128e-instruct",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        -4180,
        2300
      ],
      "id": "440dfb5f-7aa1-4b97-835b-07e987418ec4",
      "name": "Groq Chat Model16",
      "credentials": {
        "groqApi": {
          "id": "RXND1Dx3PYmWh1eD",
          "name": "GROQ"
        }
      }
    },
    {
      "parameters": {
        "promptType": "=define",
        "text": "={{ $('Pegar Mensagem').item.json.body.pergunta }}",
        "options": {
          "systemMessage": "=1. Se você receber bom dia, boa tarde, ou boa noite envie \"O que recebeu ( Bom Dia, Boa Tarde ou Boa Noite) + , se quiser fazer alguma pergunta estou disponível\"\n2. Se receber algo relacionado a seu nome como \"qual seu nome\", ou \"quem é você\", \"por que theo\", \"por que seu nome é theo\", \"Qual é seu nome\" responda \"Sou a Assistente virtual da Atos Capital\"\n3. Se receber obrigado responda \"Por Nada, se precisar fazer alguma pergunta pode falar\"\n4. Seja rápido\n5. Se receber algo com a palavra relatório so responda \"Relatorio\"\n6. Se receber a palavra Perfeito envie \"Envie uma pergunta valida\"\n7. Se receber uma pergunta que não tem relação com \"vendas, valores, filiais, metas, previsões, quanto eu vendi, qual a maior venda, qual filial mais vendeu, quanto vendi no total, qual a quantidade de filiais, qual filial bati a meta, qual a meta, qual a previsão, qual o crescimento 2025, qual crescimento meta, qual a maior, qual a menor, e a maior, e a menor, em qual dia, qual dia, e o dia, em que dia e perguntas relacionadas\" você deve envie \"true\", caso tenha relação com algo que mencionei envie \"false\"\n8. Se você receber uma única palavra ou emoji envie \"Envie uma pergunta valida\"\n9. Se receber qualquer coisa que não formule ou tenha relação com perguntas relacionadas a vendas, valores, filiais, metas, previsões, crescimento, filial que mais vendeu, quanto vendeu etc envie \"Envie uma pergunta valida\"\n10. Se receber uma frase que não tem relação com vendas, valores, filiais, metas, previsões você deve envie \"Envie uma pergunta valida\"\n11. Qualquer outra coisa envie \"false\""
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        -4200,
        2140
      ],
      "id": "72fa5ff8-9c27-4844-998f-c294bbac9166",
      "name": "Pergunta Valida1"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "b92aae35-cfd8-4661-bbc7-55fff9c56d21",
              "leftValue": "={{ $json.output }}",
              "rightValue": "Envie uma pergunta valida",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            },
            {
              "id": "33b93f73-240e-467e-9819-2e9f8a5935ef",
              "leftValue": "={{ $json.output }}",
              "rightValue": "Bom Dia",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "498dccd7-6117-4860-a337-a3740c2f70fb",
              "leftValue": "={{ $json.output }}",
              "rightValue": "Boa Tarde",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "daefa2a5-44b6-4c3a-8cf1-52b436000c46",
              "leftValue": "={{ $json.output }}",
              "rightValue": "Boa Noite",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "1ba184be-fa3e-4136-ab90-16bc3eee4b2f",
              "leftValue": "={{ $json.output }}",
              "rightValue": "Por Nada",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "68c0fafa-3ac6-4c31-9255-fc2f2db065db",
              "leftValue": "={{ $json.output }}",
              "rightValue": "boa noite",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "948347a6-1ed4-4fcd-a7f2-c692c5f9c356",
              "leftValue": "={{ $json.output }}",
              "rightValue": "bom dia",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "afb27ca7-fe3b-47d7-8bad-cf69eee37b50",
              "leftValue": "={{ $json.output }}",
              "rightValue": "boa tarde",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "736e1257-1daa-422b-bde4-2295c306e9ed",
              "leftValue": "={{ $json.output }}",
              "rightValue": "Assistente",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "ccc74f88-39da-40f6-bfae-fda97bc3e7b8",
              "leftValue": "={{ $json.output }}",
              "rightValue": "assistente",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "or"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1920,
        2000
      ],
      "id": "d4a79ca7-050e-467e-b4a7-60da9d7f03f7",
      "name": "If6"
    },
    {
      "parameters": {
        "resource": "messages-api",
        "instanceName": "=atoscapital",
        "remoteJid": "={{ $('If1').item.json.numero }}",
        "messageText": "={{ $json.output }}",
        "options_message": {
          "delay": 300
        }
      },
      "type": "n8n-nodes-evolution-api.evolutionApi",
      "typeVersion": 1,
      "position": [
        -1720,
        1840
      ],
      "id": "8872f086-23c3-4a4b-9ccb-e185e6fc14a8",
      "name": "Enviar Resposta Pergunta7",
      "credentials": {
        "evolutionApi": {
          "id": "19NxyORpzpOmLGmT",
          "name": "Evolution API"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "b92aae35-cfd8-4661-bbc7-55fff9c56d21",
              "leftValue": "={{ $json.output }}",
              "rightValue": "Envie uma pergunta valida",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            },
            {
              "id": "33b93f73-240e-467e-9819-2e9f8a5935ef",
              "leftValue": "={{ $json.output }}",
              "rightValue": "Bom Dia",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "498dccd7-6117-4860-a337-a3740c2f70fb",
              "leftValue": "={{ $json.output }}",
              "rightValue": "Boa Tarde",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "daefa2a5-44b6-4c3a-8cf1-52b436000c46",
              "leftValue": "={{ $json.output }}",
              "rightValue": "Boa Noite",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "1ba184be-fa3e-4136-ab90-16bc3eee4b2f",
              "leftValue": "={{ $json.output }}",
              "rightValue": "Por Nada",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "68c0fafa-3ac6-4c31-9255-fc2f2db065db",
              "leftValue": "={{ $json.output }}",
              "rightValue": "boa noite",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "948347a6-1ed4-4fcd-a7f2-c692c5f9c356",
              "leftValue": "={{ $json.output }}",
              "rightValue": "bom dia",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "afb27ca7-fe3b-47d7-8bad-cf69eee37b50",
              "leftValue": "={{ $json.output }}",
              "rightValue": "boa tarde",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            },
            {
              "id": "3c903c4d-ac6e-4b77-84c1-0e9fbdcbb9f3",
              "leftValue": "={{ $json.output }}",
              "rightValue": "grego",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "or"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -3920,
        2140
      ],
      "id": "1f02f8b4-fb08-4a53-8a65-cad5654407aa",
      "name": "If13"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.2,
      "position": [
        -3720,
        2080
      ],
      "id": "e505b5b0-9b24-4ca5-864a-7d24f96862e5",
      "name": "Respond to Webhook1"
    },
    {
      "parameters": {
        "promptType": "=define",
        "text": "={{ $('Numeros Autorizados').item.json.pergunta }}",
        "options": {
          "systemMessage": "=Você é um agente de IA que deve enviar apenas true ou false, se for de acordo com a regra 1 envie false, se for de acordo com a regra 2 envie true. Envie somente true ou somente false\n\nREGRAS:\n\n1. Se enviar \"Mande o relatório\" ou somente \"Relatório\" ou \"quero o relatório\", ou \"relatório de hoje\" ou o dia pedido for exatamente igual ao {{ new Date().toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' }) }} envie false\n\n2. Se eu pergunto sobre relatório e a data é qualquer outro dia envie true\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        -1580,
        1020
      ],
      "id": "87841067-43a4-4a74-b52d-0ea68a0ba614",
      "name": "Transformar em SQL5"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "b92aae35-cfd8-4661-bbc7-55fff9c56d21",
              "leftValue": "={{ $json.output }}",
              "rightValue": "true",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            },
            {
              "id": "61537689-f1e7-4589-9579-ff63bb69dfaf",
              "leftValue": "={{ $json.output }}",
              "rightValue": "True",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "or"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -1220,
        1000
      ],
      "id": "ec1b3804-1638-4782-b05a-a573fe4b5e18",
      "name": "If12"
    },
    {
      "parameters": {
        "model": "meta-llama/llama-4-maverick-17b-128e-instruct",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        -1580,
        1200
      ],
      "id": "131c0523-5e14-43d7-aa93-1e8cc4f0ee54",
      "name": "Groq Chat Model17",
      "credentials": {
        "groqApi": {
          "id": "RXND1Dx3PYmWh1eD",
          "name": "GROQ"
        }
      }
    },
    {
      "parameters": {
        "promptType": "=define",
        "text": "={{ $('Numeros Autorizados1').item.json.pergunta }}",
        "options": {
          "systemMessage": "=Você é um agente de IA que deve enviar apenas true ou false, se for de acordo com a regra 1 envie false, se for de acordo com a regra 2 envie true. Envie somente true ou somente false\n\nREGRAS:\n\n1. Se enviar \"Mande o relatório\" ou somente \"Relatório\" ou \"quero o relatório\", ou \"relatório de hoje\" ou o dia pedido for exatamente igual ao {{ new Date().toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' }) }} envie false\n\n2. Se eu pergunto sobre relatório e a data é qualquer outro dia envie true\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        -1120,
        1940
      ],
      "id": "69851db7-8b8c-4bf6-8256-0591b784bcab",
      "name": "Transformar em SQL7"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "b92aae35-cfd8-4661-bbc7-55fff9c56d21",
              "leftValue": "={{ $json.output }}",
              "rightValue": "true",
              "operator": {
                "type": "string",
                "operation": "equals"
              }
            },
            {
              "id": "c638c6e7-87cb-4f56-bd4d-d5385d1243b5",
              "leftValue": "={{ $json.output }}",
              "rightValue": "True",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "or"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -760,
        1920
      ],
      "id": "7c10f276-6c78-4795-8fa1-f8bab48f54bd",
      "name": "If14"
    },
    {
      "parameters": {
        "model": "meta-llama/llama-4-maverick-17b-128e-instruct",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        -1120,
        2120
      ],
      "id": "7e12dde4-33e9-4f49-97d6-f6b5bf0fbbf1",
      "name": "Groq Chat Model21",
      "credentials": {
        "groqApi": {
          "id": "RXND1Dx3PYmWh1eD",
          "name": "GROQ"
        }
      }
    },
    {
      "parameters": {
        "promptType": "=define",
        "text": "={{ $('Pegar Mensagem').item.json.body.pergunta }}",
        "options": {
          "systemMessage": "=Você é um agente de IA que deve enviar apenas false ou a frase que eu vou lhe falar logo abaixo, se for de acordo com a regra 1 envie false, se for de acordo com a regra 2 envie a frase. Envie somente a frase ou somente false\n\nREGRAS:\n\n1. Se enviar \"Mande o relatório\" ou somente \"Relatório\" ou \"quero o relatório\", ou \"relatório de hoje\" ou o dia pedido for exatamente igual ao {{ new Date().toLocaleString('pt-BR', { timeZone: 'America/Sao_Paulo' }) }} envie false\n\n2. Se eu pergunto sobre relatório e a data é qualquer outro dia envie o texto \"No momento não conseguimos fornecer relatórios de dias anteriores, esta função está em desenvolvimento e em breve estará disponível\"\n"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.8,
      "position": [
        -3340,
        2520
      ],
      "id": "30e506fb-0334-4eb9-9e59-47899eb05d88",
      "name": "Transformar em SQL10"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "loose",
            "version": 2
          },
          "conditions": [
            {
              "id": "b92aae35-cfd8-4661-bbc7-55fff9c56d21",
              "leftValue": "={{ $json.output }}",
              "rightValue": "momento",
              "operator": {
                "type": "string",
                "operation": "contains"
              }
            }
          ],
          "combinator": "or"
        },
        "looseTypeValidation": true,
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -3040,
        2520
      ],
      "id": "6e92f333-65a7-4c37-8e83-c8d860684fca",
      "name": "If15"
    },
    {
      "parameters": {
        "model": "meta-llama/llama-4-maverick-17b-128e-instruct",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        -3320,
        2720
      ],
      "id": "04a93bba-ac5b-448b-bde8-8f10bd4f1592",
      "name": "Groq Chat Model24",
      "credentials": {
        "groqApi": {
          "id": "RXND1Dx3PYmWh1eD",
          "name": "GROQ"
        }
      }
    },
    {
      "parameters": {
        "resource": "messages-api",
        "instanceName": "=atoscapital",
        "remoteJid": "={{ $('If').item.json.numero }}\n",
        "messageText": "No momento não conseguimos fornecer relatórios de dias anteriores, esta função está em desenvolvimento e em breve estará disponível.",
        "options_message": {}
      },
      "type": "n8n-nodes-evolution-api.evolutionApi",
      "typeVersion": 1,
      "position": [
        -980,
        800
      ],
      "id": "4bfb8c56-3a4e-45a7-b465-9ba8792f148a",
      "name": "Enviar Resposta Pergunta9",
      "credentials": {
        "evolutionApi": {
          "id": "19NxyORpzpOmLGmT",
          "name": "Evolution API"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "resource": "messages-api",
        "instanceName": "=atoscapital",
        "remoteJid": "={{ $('If1').item.json.numero }}\n",
        "messageText": "No momento não conseguimos fornecer relatórios de dias anteriores, esta função está em desenvolvimento e em breve estará disponível.",
        "options_message": {}
      },
      "type": "n8n-nodes-evolution-api.evolutionApi",
      "typeVersion": 1,
      "position": [
        -460,
        1840
      ],
      "id": "23dda3f1-c5ec-4bda-bc8e-a9cfcd3d0dce",
      "name": "Enviar Resposta Pergunta10",
      "credentials": {
        "evolutionApi": {
          "id": "19NxyORpzpOmLGmT",
          "name": "Evolution API"
        }
      },
      "onError": "continueRegularOutput"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.2,
      "position": [
        -2780,
        2440
      ],
      "id": "95cd28d4-7019-466a-8737-09c19cbeca42",
      "name": "Respond to Webhook3"
    }
  ],
  "pinData": {},
  "connections": {
    "Puxar Numeros": {
      "main": [
        [
          {
            "node": "Numeros Autorizados",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Numeros Autorizados": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Salvar Numero e Pergunta": {
      "main": [
        [
          {
            "node": "Puxar Numeros",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Pergunta Valida",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Enviar Não Possui Autorização",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Filtrar mensagens do usuário": {
      "main": [
        [
          {
            "node": "Pega o base64 do audio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Enviar Pergunta Será Processada": {
      "main": [
        [
          {
            "node": "If2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Convert to File": {
      "main": [
        [
          {
            "node": "API converter audio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Pegar Mensagem": {
      "main": [
        [
          {
            "node": "If10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Puxar Numeros1": {
      "main": [
        [
          {
            "node": "Numeros Autorizados1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Numeros Autorizados1": {
      "main": [
        [
          {
            "node": "If1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If1": {
      "main": [
        [
          {
            "node": "Pergunta Valida 1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Enviar Não Possui Autorização1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Enviar Pergunta Será Processada1": {
      "main": [
        [
          {
            "node": "If3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Groq Chat Model2": {
      "ai_languageModel": [
        [
          {
            "node": "Transformar em SQL1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Transformar em SQL1": {
      "main": [
        [
          {
            "node": "Puxar no Banco1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Groq Chat Model3": {
      "ai_languageModel": [
        [
          {
            "node": "Puxar no Banco1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Microsoft SQL1": {
      "ai_tool": [
        [
          {
            "node": "Puxar no Banco1",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Puxar no Banco1": {
      "main": [
        [
          {
            "node": "Formatar SSML",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Separa Texto ou Audio": {
      "main": [
        [
          {
            "node": "Salvar Numero e Pergunta",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Convert to File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Pega o base64 do audio": {
      "main": [
        [
          {
            "node": "Separa Texto ou Audio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "API converter audio": {
      "main": [
        [
          {
            "node": "Salvar Numero e Pergunta Audio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Salvar Numero e Pergunta Audio": {
      "main": [
        [
          {
            "node": "Puxar Numeros1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Groq Chat Model4": {
      "ai_languageModel": [
        [
          {
            "node": "Formatar SSML",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Formatar SSML": {
      "main": [
        [
          {
            "node": "Gerar áudio",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Gerar áudio": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "Enviar Resposta Pergunta1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If2": {
      "main": [
        [
          {
            "node": "Microsoft SQL4",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Comparar Pergunta",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Groq Chat Model5": {
      "ai_languageModel": [
        [
          {
            "node": "Transformar em SQL2",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Transformar em SQL2": {
      "main": [
        [
          {
            "node": "Converter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Microsoft SQL2": {
      "ai_tool": [
        [
          {
            "node": "Transformar em SQL2",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Converter": {
      "main": [
        [
          {
            "node": "PDFco Api1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If3": {
      "main": [
        [
          {
            "node": "Microsoft SQL5",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "If4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "PDFco Api1": {
      "main": [
        [
          {
            "node": "Enviar Resposta Pergunta4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transformar em SQL3": {
      "main": [
        [
          {
            "node": "Converter1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Groq Chat Model6": {
      "ai_languageModel": [
        [
          {
            "node": "Transformar em SQL3",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Microsoft SQL3": {
      "ai_tool": [
        [
          {
            "node": "Transformar em SQL3",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Converter1": {
      "main": [
        [
          {
            "node": "PDFco Api",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "PDFco Api": {
      "main": [
        [
          {
            "node": "Enviar Resposta Pergunta5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Microsoft SQL4": {
      "main": [
        [
          {
            "node": "Transformar em SQL5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Microsoft SQL5": {
      "main": [
        [
          {
            "node": "Transformar em SQL7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If4": {
      "main": [
        [
          {
            "node": "Comparar Pergunta1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Comparar Pergunta2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Groq Chat Model9": {
      "ai_languageModel": [
        [
          {
            "node": "Pergunta Valida",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "If5": {
      "main": [
        [
          {
            "node": "Enviar Resposta Pergunta3",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Enviar Pergunta Será Processada",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Groq Chat Model10": {
      "ai_languageModel": [
        [
          {
            "node": "Pergunta Valida 1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Pergunta Valida 1": {
      "main": [
        [
          {
            "node": "If6",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Pergunta Valida": {
      "main": [
        [
          {
            "node": "If5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If10": {
      "main": [
        [
          {
            "node": "Filtrar mensagens do usuário",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Pergunta Valida1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Microsoft SQL7": {
      "ai_tool": [
        [
          {
            "node": "Puxar no Banco3",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Groq Chat Model14": {
      "ai_languageModel": [
        [
          {
            "node": "Transformar em SQL8",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Groq Chat Model15": {
      "ai_languageModel": [
        [
          {
            "node": "Puxar no Banco3",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Transformar em SQL8": {
      "main": [
        [
          {
            "node": "Puxar no Banco3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Puxar no Banco3": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If11": {
      "main": [
        [
          {
            "node": "Microsoft SQL11",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Transformar em SQL8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transformar em SQL11": {
      "main": [
        [
          {
            "node": "Converter3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Groq Chat Model18": {
      "ai_languageModel": [
        [
          {
            "node": "Transformar em SQL11",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Microsoft SQL10": {
      "ai_tool": [
        [
          {
            "node": "Transformar em SQL11",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Converter3": {
      "main": [
        [
          {
            "node": "PDFco Api3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "PDFco Api3": {
      "main": [
        [
          {
            "node": "Converter4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Microsoft SQL11": {
      "main": [
        [
          {
            "node": "Transformar em SQL10",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Converter4": {
      "main": [
        [
          {
            "node": "Respond to Webhook2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Microsoft SQL": {
      "ai_tool": [
        [
          {
            "node": "Puxar no Banco",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Groq Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Transformar em SQL",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Groq Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Puxar no Banco",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Transformar em SQL": {
      "main": [
        [
          {
            "node": "Puxar no Banco",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Puxar no Banco": {
      "main": [
        [
          {
            "node": "Enviar Resposta Pergunta",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Comparar Pergunta": {
      "main": [
        [
          {
            "node": "If7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If7": {
      "main": [
        [
          {
            "node": "MySQL",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "MySQL1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Groq Chat Model11": {
      "ai_languageModel": [
        [
          {
            "node": "Transf Pergunta",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "MySQL": {
      "main": [
        [
          {
            "node": "Transf Pergunta",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MySQL1": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transf Pergunta": {
      "main": [
        [
          {
            "node": "MySQL2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Transformar em SQL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MySQL2": {
      "main": [
        [
          {
            "node": "Transformar em SQL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Microsoft SQL6": {
      "ai_tool": [
        [
          {
            "node": "Puxar no Banco2",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Groq Chat Model7": {
      "ai_languageModel": [
        [
          {
            "node": "Transformar em SQL4",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Groq Chat Model8": {
      "ai_languageModel": [
        [
          {
            "node": "Puxar no Banco2",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Transformar em SQL4": {
      "main": [
        [
          {
            "node": "Puxar no Banco2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Puxar no Banco2": {
      "main": [
        [
          {
            "node": "Enviar Resposta Pergunta2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Comparar Pergunta1": {
      "main": [
        [
          {
            "node": "If8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If8": {
      "main": [
        [
          {
            "node": "MySQL3",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "MySQL4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Groq Chat Model12": {
      "ai_languageModel": [
        [
          {
            "node": "Transf Pergunta1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "MySQL3": {
      "main": [
        [
          {
            "node": "Transf Pergunta1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MySQL4": {
      "main": [
        [
          {
            "node": "Edit Fields1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transf Pergunta1": {
      "main": [
        [
          {
            "node": "MySQL5",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields1": {
      "main": [
        [
          {
            "node": "Transformar em SQL4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MySQL5": {
      "main": [
        [
          {
            "node": "Transformar em SQL4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Comparar Pergunta2": {
      "main": [
        [
          {
            "node": "If9",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If9": {
      "main": [
        [
          {
            "node": "MySQL6",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "MySQL7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Groq Chat Model13": {
      "ai_languageModel": [
        [
          {
            "node": "Transf Pergunta2",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "MySQL6": {
      "main": [
        [
          {
            "node": "Transf Pergunta2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MySQL7": {
      "main": [
        [
          {
            "node": "Edit Fields2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transf Pergunta2": {
      "main": [
        [
          {
            "node": "MySQL8",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "MySQL8": {
      "main": [
        [
          {
            "node": "Transformar em SQL1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields2": {
      "main": [
        [
          {
            "node": "Transformar em SQL1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Groq Chat Model16": {
      "ai_languageModel": [
        [
          {
            "node": "Pergunta Valida1",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Pergunta Valida1": {
      "main": [
        [
          {
            "node": "If13",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If6": {
      "main": [
        [
          {
            "node": "Enviar Resposta Pergunta7",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Enviar Pergunta Será Processada1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If13": {
      "main": [
        [
          {
            "node": "Respond to Webhook1",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "If11",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transformar em SQL5": {
      "main": [
        [
          {
            "node": "If12",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If12": {
      "main": [
        [
          {
            "node": "Enviar Resposta Pergunta9",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Transformar em SQL2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Groq Chat Model17": {
      "ai_languageModel": [
        [
          {
            "node": "Transformar em SQL5",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Enviar Resposta Pergunta": {
      "main": [
        []
      ]
    },
    "Transformar em SQL7": {
      "main": [
        [
          {
            "node": "If14",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Groq Chat Model21": {
      "ai_languageModel": [
        [
          {
            "node": "Transformar em SQL7",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "If14": {
      "main": [
        [
          {
            "node": "Enviar Resposta Pergunta10",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Transformar em SQL3",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Transformar em SQL10": {
      "main": [
        [
          {
            "node": "If15",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Groq Chat Model24": {
      "ai_languageModel": [
        [
          {
            "node": "Transformar em SQL10",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "If15": {
      "main": [
        [
          {
            "node": "Respond to Webhook3",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Transformar em SQL11",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "9ddb7157-bdc9-419d-a324-f120bed3edf1",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "80b8e67e00da678b0aae2832016cd640f5551ccd757900f28d440cc130ebe8b7"
  },
  "id": "oPYYP4U3ME2AC7St",
  "tags": []
}